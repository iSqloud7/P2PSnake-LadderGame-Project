#!/usr/bin/env python3
"""
–ï–¥–Ω–æ—Å—Ç–∞–≤–Ω–∞ WebRTC –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–∑–∏—ò–∞ —à—Ç–æ —Ä–∞–±–æ—Ç–∏ —Å–æ –ø–æ—Å—Ç–∞—Ä–∏ aiortc –≤–µ—Ä–∑–∏–∏
"""

import asyncio
import json
import logging
from typing import Callable, Optional
import threading
import queue
import time

try:
    from aiortc import RTCPeerConnection, RTCDataChannel, RTCConfiguration, RTCIceServer
    from aiortc import RTCSessionDescription
    import websockets

    WEBRTC_AVAILABLE = True
except ImportError:
    WEBRTC_AVAILABLE = False
    print("Warning: aiortc not installed. Install with: pip install aiortc")

logger = logging.getLogger(__name__)


class WebRTCClient:
    """–ï–¥–Ω–æ—Å—Ç–∞–≤–µ–Ω WebRTC –∫–ª–∏–µ–Ω—Ç –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞"""

    def __init__(self, signaling_server_url="ws://127.0.0.1:8765"):
        if not WEBRTC_AVAILABLE:
            raise ImportError("aiortc library is required for WebRTC functionality")

        self.signaling_url = signaling_server_url
        self.signaling_ws = None

        # –û—Å–Ω–æ–≤–Ω–∞ WebRTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞
        ice_servers = [
            RTCIceServer(urls=["stun:stun.l.google.com:19302"]),
            RTCIceServer(urls=["stun:stun1.l.google.com:19302"]),
        ]

        # –ï–¥–Ω–æ—Å—Ç–∞–≤–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—ò–∞
        self.pc = RTCPeerConnection(configuration=RTCConfiguration(
            iceServers=ice_servers
        ))

        # Data channel –∑–∞ –∏–≥—Ä–∞ –ø–æ—Ä–∞–∫–∏
        self.data_channel: Optional[RTCDataChannel] = None

        # –°–æ—Å—Ç–æ—ò–±–∏
        self.session_id = None
        self.invite_code = None
        self.is_host = False
        self.connection_state = "disconnected"

        # Callback —Ñ—É–Ω–∫—Ü–∏–∏
        self.on_message_received: Optional[Callable] = None
        self.on_connection_state_change: Optional[Callable] = None
        self.on_peer_info_received: Optional[Callable] = None

        # Threading –∑–∞ async –æ–ø–µ—Ä–∞—Ü–∏–∏
        self.loop = None
        self.thread = None
        self.message_queue = queue.Queue()

        # Setup WebRTC event handlers
        self._setup_webrtc_handlers()

    def _setup_webrtc_handlers(self):
        """–ü–æ—Å—Ç–∞–≤–∏ WebRTC event handlers"""

        @self.pc.on("connectionstatechange")
        async def on_connectionstatechange():
            state = self.pc.connectionState
            print(f"WebRTC Connection state: {state}")

            if state == "connected":
                self.connection_state = "connected"
                print("‚úÖ WebRTC P2P connection established!")
            elif state in ["disconnected", "failed", "closed"]:
                if state == "failed":
                    print("‚ùå WebRTC connection failed")
                self.connection_state = "disconnected"
            else:
                self.connection_state = "connecting"

            if self.on_connection_state_change:
                try:
                    self.on_connection_state_change(self.connection_state)
                except Exception as e:
                    print(f"Error in connection state callback: {e}")

        @self.pc.on("datachannel")
        def on_datachannel(channel):
            """–ü—Ä–∏–º–∏ data channel –æ–¥ remote peer"""
            print(f"Received data channel: {channel.label}")
            self._setup_data_channel(channel)

        @self.pc.on("iceconnectionstatechange")
        async def on_iceconnectionstatechange():
            ice_state = self.pc.iceConnectionState
            print(f"ICE connection state: {ice_state}")

            if ice_state == "connected":
                print("‚úÖ ICE connection established")
            elif ice_state == "failed":
                print("‚ùå ICE connection failed - NAT/Firewall issues")

    def _setup_data_channel(self, channel: RTCDataChannel):
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞—ò data channel"""
        self.data_channel = channel

        @channel.on("open")
        def on_open():
            print("‚úÖ Data channel opened - P2P communication ready!")

        @channel.on("message")
        def on_message(message):
            """–ü—Ä–∏–º–∏ –ø–æ—Ä–∞–∫–∞ –æ–¥ remote peer"""
            try:
                if isinstance(message, str):
                    data = json.loads(message)
                elif isinstance(message, bytes):
                    data = json.loads(message.decode('utf-8'))
                else:
                    data = {"type": "raw", "data": str(message)}

                print(f"üì® Received P2P message: {data.get('type', 'unknown')}")

                # –°—Ç–∞–≤–∏ —ò–∞ –ø–æ—Ä–∞–∫–∞—Ç–∞ –≤–æ queue –∑–∞ main thread
                self.message_queue.put(data)

                if self.on_message_received:
                    self.on_message_received(data)

            except Exception as e:
                print(f"Error processing received message: {e}")

        @channel.on("close")
        def on_close():
            print("Data channel closed")

    def start_async_thread(self):
        """–°—Ç–∞—Ä—Ç–∞—ò async thread –∑–∞ WebRTC –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if self.thread and self.thread.is_alive():
            return

        def run_async_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            try:
                self.loop.run_forever()
            except Exception as e:
                print(f"Error in async loop: {e}")
            finally:
                self.loop.close()

        self.thread = threading.Thread(target=run_async_loop, daemon=True)
        self.thread.start()

        # –ß–µ–∫–∞—ò –¥–∞ —Å–µ –∏–Ω–∏—Ü–∏—ò–∞–ª–∏–∑–∏—Ä–∞ loop
        timeout = 10
        start_time = time.time()
        while (not self.loop or not self.loop.is_running()) and (time.time() - start_time < timeout):
            time.sleep(0.1)

    def stop_async_thread(self):
        """–ó–∞—Å—Ç–∞–Ω–∏ async thread"""
        if self.loop and self.loop.is_running():
            self.loop.call_soon_threadsafe(self.loop.stop)
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=5.0)

    def create_session(self, player_name="Host", player_avatar="üôÇ"):
        """–°–æ–∑–¥–∞—ò –Ω–æ–≤–∞ —Å–µ—Å–∏—ò–∞ –∫–∞–∫–æ host"""
        self.is_host = True
        self.start_async_thread()

        # –°—Ç–∞—Ä—Ç–∞—ò async –æ–ø–µ—Ä–∞—Ü–∏—ò–∞
        future = asyncio.run_coroutine_threadsafe(
            self._create_session_async(player_name, player_avatar),
            self.loop
        )
        return future

    def join_session(self, session_id_or_code, player_name="Guest", player_avatar="üòé"):
        """–ü—Ä–∏–∫–ª—É—á–∏ —Å–µ –Ω–∞ –ø–æ—Å—Ç–æ–µ—á–∫–∞ —Å–µ—Å–∏—ò–∞"""
        self.is_host = False
        self.start_async_thread()

        # –°—Ç–∞—Ä—Ç–∞—ò async –æ–ø–µ—Ä–∞—Ü–∏—ò–∞
        future = asyncio.run_coroutine_threadsafe(
            self._join_session_async(session_id_or_code, player_name, player_avatar),
            self.loop
        )
        return future

    async def _create_session_async(self, player_name, player_avatar):
        """Async –æ–ø–µ—Ä–∞—Ü–∏—ò–∞ –∑–∞ —Å–æ–∑–¥–∞–≤–∞—ö–µ —Å–µ—Å–∏—ò–∞"""
        try:
            print(f"Connecting to signaling server: {self.signaling_url}")

            # –ü–æ–≤—Ä–∑–∏ —Å–µ –Ω–∞ signaling —Å–µ—Ä–≤–µ—Ä
            self.signaling_ws = await websockets.connect(self.signaling_url)
            print("Connected to signaling server")

            # –°–æ–∑–¥–∞—ò data channel
            self.data_channel = self.pc.createDataChannel("game", ordered=True)
            self._setup_data_channel(self.data_channel)

            # –ò—Å–ø—Ä–∞—Ç–∏ –±–∞—Ä–∞—ö–µ –∑–∞ —Å–æ–∑–¥–∞–≤–∞—ö–µ —Å–µ—Å–∏—ò–∞
            await self.signaling_ws.send(json.dumps({
                "type": "create_session",
                "player_name": player_name,
                "player_avatar": player_avatar
            }))

            print("Session creation request sent")

            # –ß–µ–∫–∞—ò –æ–¥–≥–æ–≤–æ—Ä –æ–¥ signaling —Å–µ—Ä–≤–µ—Ä
            await self._handle_signaling_messages()

        except Exception as e:
            print(f"Error creating session: {e}")
            raise

    async def _join_session_async(self, session_id_or_code, player_name, player_avatar):
        """Async –æ–ø–µ—Ä–∞—Ü–∏—ò–∞ –∑–∞ –ø—Ä–∏–∫–ª—É—á—É–≤–∞—ö–µ –Ω–∞ —Å–µ—Å–∏—ò–∞"""
        try:
            print(f"Connecting to signaling server: {self.signaling_url}")

            # –ü–æ–≤—Ä–∑–∏ —Å–µ –Ω–∞ signaling —Å–µ—Ä–≤–µ—Ä
            self.signaling_ws = await websockets.connect(self.signaling_url)
            print("Connected to signaling server")

            # –û–¥—Ä–µ–¥–∏ –¥–∞–ª–∏ –µ session_id –∏–ª–∏ invite_code
            join_data = {
                "type": "join_session",
                "player_name": player_name,
                "player_avatar": player_avatar
            }

            if len(session_id_or_code) == 8:
                join_data["invite_code"] = session_id_or_code.upper()
                print(f"Joining with invite code: {session_id_or_code}")
            else:
                join_data["session_id"] = session_id_or_code
                print(f"Joining with session ID: {session_id_or_code}")

            await self.signaling_ws.send(json.dumps(join_data))

            # –ß–µ–∫–∞—ò –æ–¥–≥–æ–≤–æ—Ä –æ–¥ signaling —Å–µ—Ä–≤–µ—Ä
            await self._handle_signaling_messages()

        except Exception as e:
            print(f"Error joining session: {e}")
            raise

    async def _handle_signaling_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ signaling –ø–æ—Ä–∞–∫–∏"""
        try:
            async for message in self.signaling_ws:
                data = json.loads(message)
                message_type = data.get("type")
                print(f"Received signaling message: {message_type}")

                if message_type == "session_created":
                    self.session_id = data.get("session_id")
                    self.invite_code = data.get("invite_code")
                    print(f"‚úÖ Session created with invite code: {self.invite_code}")

                    if self.on_connection_state_change:
                        self.on_connection_state_change("waiting_for_guest")

                elif message_type == "guest_joined":
                    print("‚úÖ Guest joined - starting WebRTC negotiation")
                    guest_info = data.get("guest_info")

                    if self.on_peer_info_received:
                        self.on_peer_info_received(guest_info)

                    # Host –∑–∞–ø–æ—á–Ω—É–≤–∞ WebRTC connection
                    await self._initiate_webrtc_connection()

                elif message_type == "session_joined":
                    self.session_id = data.get("session_id")
                    host_info = data.get("host_info")
                    print(f"‚úÖ Joined session: {self.session_id}")

                    if self.on_peer_info_received:
                        self.on_peer_info_received(host_info)

                elif message_type == "webrtc_offer":
                    print("üì® Received WebRTC offer - creating answer")
                    offer_data = data.get("offer")
                    await self._handle_webrtc_offer(offer_data)

                elif message_type == "webrtc_answer":
                    print("üì® Received WebRTC answer - completing connection")
                    answer_data = data.get("answer")
                    await self._handle_webrtc_answer(answer_data)

                elif message_type == "webrtc_ice_candidate":
                    candidate_data = data.get("candidate")
                    await self._handle_ice_candidate(candidate_data)

                elif message_type == "error":
                    error_msg = data.get("message", "Unknown error")
                    print(f"‚ùå Signaling error: {error_msg}")
                    raise Exception(f"Signaling error: {error_msg}")

                elif message_type == "peer_disconnected":
                    print("üì§ Peer disconnected")
                    if self.on_connection_state_change:
                        self.on_connection_state_change("peer_disconnected")

        except websockets.exceptions.ConnectionClosed:
            print("Signaling connection closed")
        except Exception as e:
            print(f"Error in signaling: {e}")
            raise

    async def _initiate_webrtc_connection(self):
        """Host –≥–æ –∑–∞–ø–æ—á–Ω—É–≤–∞ WebRTC connection –ø—Ä–æ—Ü–µ—Å–æ—Ç"""
        try:
            print("üîÑ Creating WebRTC offer...")

            # –°–æ–∑–¥–∞—ò offer
            offer = await self.pc.createOffer()
            await self.pc.setLocalDescription(offer)

            print("üì§ Sending WebRTC offer...")

            # –ò—Å–ø—Ä–∞—Ç–∏ offer –ø—Ä–µ–∫—É signaling
            await self.signaling_ws.send(json.dumps({
                "type": "webrtc_offer",
                "session_id": self.session_id,
                "offer": {
                    "type": offer.type,
                    "sdp": offer.sdp
                }
            }))

            if self.on_connection_state_change:
                self.on_connection_state_change("connecting")

        except Exception as e:
            print(f"‚ùå Error creating WebRTC offer: {e}")
            raise

    async def _handle_webrtc_offer(self, offer_data):
        """Guest –≥–æ –æ–±—Ä–∞–±–æ—Ç—É–≤–∞ offer –∏ —Å–æ–∑–¥–∞–≤–∞ answer"""
        try:
            print("üîÑ Processing WebRTC offer...")

            # –ü–æ—Å—Ç–∞–≤–∏ remote description
            offer = RTCSessionDescription(sdp=offer_data["sdp"], type=offer_data["type"])
            await self.pc.setRemoteDescription(offer)

            # –°–æ–∑–¥–∞—ò answer
            answer = await self.pc.createAnswer()
            await self.pc.setLocalDescription(answer)

            print("üì§ Sending WebRTC answer...")

            # –ò—Å–ø—Ä–∞—Ç–∏ answer –ø—Ä–µ–∫—É signaling
            await self.signaling_ws.send(json.dumps({
                "type": "webrtc_answer",
                "session_id": self.session_id,
                "answer": {
                    "type": answer.type,
                    "sdp": answer.sdp
                }
            }))

            if self.on_connection_state_change:
                self.on_connection_state_change("connecting")

        except Exception as e:
            print(f"‚ùå Error handling WebRTC offer: {e}")
            raise

    async def _handle_webrtc_answer(self, answer_data):
        """Host –≥–æ –æ–±—Ä–∞–±–æ—Ç—É–≤–∞ answer"""
        try:
            print("üîÑ Processing WebRTC answer...")

            answer = RTCSessionDescription(sdp=answer_data["sdp"], type=answer_data["type"])
            await self.pc.setRemoteDescription(answer)

            print("‚úÖ WebRTC negotiation completed - waiting for ICE connection")

        except Exception as e:
            print(f"‚ùå Error handling WebRTC answer: {e}")
            raise

    async def _handle_ice_candidate(self, candidate_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∏"""
        try:
            from aiortc import RTCIceCandidate

            candidate = RTCIceCandidate(
                candidate=candidate_data["candidate"],
                sdpMid=candidate_data["sdpMid"],
                sdpMLineIndex=candidate_data["sdpMLineIndex"]
            )

            await self.pc.addIceCandidate(candidate)
            print("Processed ICE candidate")

        except Exception as e:
            print(f"Error handling ICE candidate: {e}")

    def send_message(self, message_dict):
        """–ò—Å–ø—Ä–∞—Ç–∏ –ø–æ—Ä–∞–∫–∞ –ø—Ä–µ–∫—É P2P data channel"""
        if not self.data_channel or self.data_channel.readyState != "open":
            print("‚ö†Ô∏è Data channel not ready for sending")
            return False

        try:
            message_json = json.dumps(message_dict)
            self.data_channel.send(message_json)
            print(f"üì§ Sent P2P message: {message_dict.get('type', 'unknown')}")
            return True
        except Exception as e:
            print(f"‚ùå Error sending message: {e}")
            return False

    def get_pending_messages(self):
        """–í—Ä–∞—Ç–∏ –≥–∏ —Å–∏—Ç–µ pending –ø–æ—Ä–∞–∫–∏ –æ–¥ queue"""
        messages = []
        try:
            while True:
                message = self.message_queue.get_nowait()
                messages.append(message)
        except queue.Empty:
            pass
        return messages

    def close(self):
        """–ó–∞—Ç–≤–æ—Ä–∏ –≥–∏ —Å–∏—Ç–µ –≤—Ä—Å–∫–∏"""
        print("üõë Closing WebRTC client...")

        if self.loop and self.loop.is_running():
            # –ó–∞—Ç–≤–æ—Ä–∏ WebRTC connection
            asyncio.run_coroutine_threadsafe(self.pc.close(), self.loop)

            # –ó–∞—Ç–≤–æ—Ä–∏ signaling connection
            if self.signaling_ws:
                asyncio.run_coroutine_threadsafe(self.signaling_ws.close(), self.loop)

        self.stop_async_thread()
        self.connection_state = "disconnected"
        print("‚úÖ WebRTC client closed")


if __name__ == "__main__":
    if WEBRTC_AVAILABLE:
        print("‚úÖ Simple WebRTC client ready for testing")
    else:
        print("‚ùå Install dependencies: pip install aiortc websockets")