#!/usr/bin/env python3
"""
–ì–ª–∞–≤–µ–Ω starter script –∑–∞ WebRTC P2P Snake & Ladder –∏–≥—Ä–∞
–ò–°–ü–†–ê–í–ï–ù–ê –í–ï–†–ó–ò–à–ê –ó–ê WINDOWS
"""

import sys
import subprocess
import importlib
import threading
import time
import os
from pathlib import Path
import platform


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ Python –≤–µ—Ä–∑–∏—ò–∞—Ç–∞ –µ —Å–æ–æ–¥–≤–µ—Ç–Ω–∞"""
    if sys.version_info < (3, 8):
        print("‚ùå –ì—Ä–µ—à–∫–∞: –ü–æ—Ç—Ä–µ–±–Ω–∞ –µ Python 3.8 –∏–ª–∏ –ø–æ–≤–∏—Å–æ–∫–æ")
        print(f"   –í–∞—à–∞—Ç–∞ –≤–µ—Ä–∑–∏—ò–∞: {sys.version}")
        return False
    return True


def check_and_install_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∏ –∏ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞—ò –≥–∏ –ø–æ—Ç—Ä–µ–±–Ω–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    required_packages = {
        'aiortc': 'aiortc==1.6.0',
        'websockets': 'websockets==12.0',
        'PIL': 'Pillow==10.1.0',
        'fastapi': 'fastapi==0.104.1',
        'uvicorn': 'uvicorn==0.24.0',
        'requests': 'requests==2.31.0'
    }

    missing_packages = []

    for package, pip_name in required_packages.items():
        try:
            importlib.import_module(package)
            print(f"‚úÖ {package} - –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
        except ImportError:
            print(f"‚ùå {package} - –Ω–µ –µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω")
            missing_packages.append(pip_name)

    if missing_packages:
        print("\nüì¶ –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–º –ø–æ—Ç—Ä–µ–±–Ω–∏ –ø–∞–∫–µ—Ç–∏...")
        try:
            subprocess.check_call([
                                      sys.executable, "-m", "pip", "install"
                                  ] + missing_packages)
            print("‚úÖ –°–∏—Ç–µ –ø–∞–∫–µ—Ç–∏ —Å–µ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∏ —É—Å–ø–µ—à–Ω–æ!")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞—ö–µ. –û–±–∏–¥–µ—Ç–µ —Å–µ —Ä–∞—á–Ω–æ:")
            print(f"   pip install {' '.join(missing_packages)}")
            return False

    return True


def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–Ω–∏ —Ñ–∞–π–ª–æ–≤–∏ –ø–æ—Å—Ç–æ—ò–∞—Ç"""
    required_files = [
        'webrtc_signaling_server.py',
        'webrtc_client.py',
        'webrtc_game_client.py',
        'webrtc_snake_ladder_game.py',
        'auth_server.py'
    ]

    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            missing_files.append(file)
            print(f"‚ùå {file} - –Ω–µ –ø–æ—Å—Ç–æ–∏")

    if missing_files:
        print(f"\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞–∞—Ç —Ñ–∞–π–ª–æ–≤–∏: {', '.join(missing_files)}")
        return False

    return True


def start_auth_server():
    """–°—Ç–∞—Ä—Ç–∞—ò Auth HTTP —Å–µ—Ä–≤–µ—Ä –≤–æ background - Windows compatible"""
    try:
        print("üîÑ –°—Ç–∞—Ä—Ç—É–≤–∞–º Auth —Å–µ—Ä–≤–µ—Ä...")

        # –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Ñ–∞–π–ª–æ—Ç –ø–æ—Å—Ç–æ–∏
        if not os.path.exists('auth_server.py'):
            print("‚ùå auth_server.py –Ω–µ –ø–æ—Å—Ç–æ–∏!")
            return None

        # –ó–∞ Windows, –∫–æ—Ä–∏—Å—Ç–∏ –∫—Ä–µ–∏—Ä–∞—ö–µ –Ω–∞ –Ω–æ–≤ –ø—Ä–æ–∑–æ—Ä–µ—Ü
        if platform.system() == "Windows":
            # CREATE_NEW_CONSOLE –∑–∞ –¥–∞ —Å–µ –æ—Ç–≤–æ—Ä–∏ –≤–æ –ø–æ—Å–µ–±–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü
            process = subprocess.Popen([
                sys.executable, 'auth_server.py'
            ],
                creationflags=subprocess.CREATE_NEW_CONSOLE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
        else:
            # –ó–∞ Linux/Mac
            process = subprocess.Popen([
                sys.executable, 'auth_server.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        # –ß–µ–∫–∞—ò –ø–æ–¥–æ–ª–≥–æ –∑–∞ Windows
        time.sleep(5)

        # –ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å–æ—Ç —Ä–∞–±–æ—Ç–∏
        if process.poll() is None:
            print("‚úÖ Auth —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–≤–∞–Ω (PID: {})".format(process.pid))

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–µ—Å—Ç–∏—Ä–∞—ò HTTP –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ
            try:
                import requests
                time.sleep(2)  # –î–∞—ò –º–∞–ª–∫—É –ø–æ–≤–µ—ú–µ –≤—Ä–µ–º–µ
                response = requests.get("http://localhost:8000/status", timeout=10)
                if response.status_code == 200:
                    print("‚úÖ Auth —Å–µ—Ä–≤–µ—Ä –æ–¥–≥–æ–≤–∞—Ä–∞ –Ω–∞ HTTP –±–∞—Ä–∞—ö–∞")
                    return process
                else:
                    print("‚ö†Ô∏è Auth —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∏ –Ω–æ –Ω–µ –æ–¥–≥–æ–≤–∞—Ä–∞ –ø—Ä–∞–≤–∏–ª–Ω–æ")
                    return process
            except Exception as e:
                print(f"‚ö†Ô∏è Auth —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–≤–∞–Ω –Ω–æ –Ω–µ–º–∞ HTTP –æ–¥–≥–æ–≤–æ—Ä: {e}")
                return process
        else:
            # –ü—Ä–∏–∫–∞–∂–∏ —ò–∞ –≥—Ä–µ—à–∫–∞—Ç–∞
            stdout, stderr = process.communicate()
            print("‚ùå Auth —Å–µ—Ä–≤–µ—Ä —Å–µ —É—Ä–Ω–∞:")
            if stderr:
                print("STDERR:", stderr.decode())
            if stdout:
                print("STDOUT:", stdout.decode())
            return None

    except Exception as e:
        print(f"‚ùå –ù–µ–º–æ–∂–µ –¥–∞ —Å–µ —Å—Ç–∞—Ä—Ç—É–≤–∞ auth —Å–µ—Ä–≤–µ—Ä: {e}")
        return None


def start_signaling_server():
    """–°—Ç–∞—Ä—Ç–∞—ò signaling —Å–µ—Ä–≤–µ—Ä –≤–æ background - Windows compatible"""
    try:
        print("üîÑ –°—Ç–∞—Ä—Ç—É–≤–∞–º Signaling —Å–µ—Ä–≤–µ—Ä...")

        if not os.path.exists('webrtc_signaling_server.py'):
            print("‚ùå webrtc_signaling_server.py –Ω–µ –ø–æ—Å—Ç–æ–∏!")
            return None

        # –ó–∞ Windows, –∫–æ—Ä–∏—Å—Ç–∏ –∫—Ä–µ–∏—Ä–∞—ö–µ –Ω–∞ –Ω–æ–≤ –ø—Ä–æ–∑–æ—Ä–µ—Ü
        if platform.system() == "Windows":
            process = subprocess.Popen([
                sys.executable, 'webrtc_signaling_server.py'
            ],
                creationflags=subprocess.CREATE_NEW_CONSOLE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE)
        else:
            process = subprocess.Popen([
                sys.executable, 'webrtc_signaling_server.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

        time.sleep(3)

        if process.poll() is None:
            print("‚úÖ Signaling —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç—É–≤–∞–Ω (PID: {})".format(process.pid))
            return process
        else:
            stdout, stderr = process.communicate()
            print("‚ùå Signaling —Å–µ—Ä–≤–µ—Ä —Å–µ —É—Ä–Ω–∞:")
            if stderr:
                print("STDERR:", stderr.decode())
            if stdout:
                print("STDOUT:", stdout.decode())
            return None

    except Exception as e:
        print(f"‚ùå –ù–µ–º–æ–∂–µ –¥–∞ —Å–µ —Å—Ç–∞—Ä—Ç—É–≤–∞ signaling —Å–µ—Ä–≤–µ—Ä: {e}")
        return None


def start_game_client():
    """–°—Ç–∞—Ä—Ç–∞—ò –∏–≥—Ä–∞ –∫–ª–∏–µ–Ω—Ç"""
    try:
        print("üéÆ –°—Ç–∞—Ä—Ç—É–≤–∞–º –∏–≥—Ä–∞ –∫–ª–∏–µ–Ω—Ç...")
        import webrtc_game_client
        client = webrtc_game_client.WebRTCGameClient()
        client.run()
        return True
    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—É–≤–∞—ö–µ –Ω–∞ –∏–≥—Ä–∞ –∫–ª–∏–µ–Ω—Ç: {e}")
        return False


def start_servers_in_terminals():
    """–ê–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ–Ω –Ω–∞—á–∏–Ω - –æ—Ç–≤–æ—Ä–∏ —Å–µ—Ä–≤–µ—Ä–∏ –≤–æ –ø–æ—Å–µ–±–Ω–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∏"""
    print("\nüñ•Ô∏è –û—Ç–≤–∞—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∏ –≤–æ –ø–æ—Å–µ–±–Ω–∏ –ø—Ä–æ–∑–æ—Ä—Ü–∏...")

    if platform.system() == "Windows":
        # Windows –∫–æ–º–∞–Ω–¥–∏
        try:
            # Auth —Å–µ—Ä–≤–µ—Ä
            subprocess.Popen([
                'start', 'cmd', '/k',
                f'cd /d "{os.getcwd()}" && python auth_server.py'
            ], shell=True)
            print("‚úÖ Auth —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–∑–æ—Ä–µ—Ü –æ—Ç–≤–æ—Ä–µ–Ω")

            time.sleep(2)

            # Signaling —Å–µ—Ä–≤–µ—Ä
            subprocess.Popen([
                'start', 'cmd', '/k',
                f'cd /d "{os.getcwd()}" && python webrtc_signaling_server.py'
            ], shell=True)
            print("‚úÖ Signaling —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–∑–æ—Ä–µ—Ü –æ—Ç–≤–æ—Ä–µ–Ω")

            return True

        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–≤–∞—Ä–∞—ö–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∏: {e}")
            return False
    else:
        # Linux/Mac –∫–æ–º–∞–Ω–¥–∏
        try:
            subprocess.Popen(['gnome-terminal', '--', 'python3', 'auth_server.py'])
            time.sleep(1)
            subprocess.Popen(['gnome-terminal', '--', 'python3', 'webrtc_signaling_server.py'])
            return True
        except:
            try:
                subprocess.Popen(['xterm', '-e', 'python3', 'auth_server.py'])
                time.sleep(1)
                subprocess.Popen(['xterm', '-e', 'python3', 'webrtc_signaling_server.py'])
                return True
            except Exception as e:
                print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç–≤–∞—Ä–∞—ö–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∏: {e}")
                return False


def show_menu():
    """–ü—Ä–∏–∫–∞–∂–∏ –≥–ª–∞–≤–Ω–æ –º–µ–Ω–∏ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –Ω–∞—á–∏–Ω –Ω–∞ —Å—Ç–∞—Ä—Ç—É–≤–∞—ö–µ"""
    print("\n" + "=" * 60)
    print("üêç WebRTC P2P Snake & Ladder –∏–≥—Ä–∞ —Å–æ Auth —Å–∏—Å—Ç–µ–º")
    print("=" * 60)
    print()
    print("–ò–∑–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—ò–∞:")
    print("1. üöÄ –°—Ç–∞—Ä—Ç–∞—ò –∫–æ–º–ø–ª–µ—Ç–Ω–∞ –∏–≥—Ä–∞ (Auth + Signaling + Client)")
    print("2. üñ•Ô∏è –û—Ç–≤–æ—Ä–∏ —Å–µ—Ä–≤–µ—Ä–∏ –≤–æ –ø–æ—Å–µ–±–Ω–∏ –ø—Ä–æ–∑–æ—Ä—Ü–∏ + Client")
    print("3. üéÆ –°—Ç–∞—Ä—Ç–∞—ò —Å–∞–º–æ –∏–≥—Ä–∞ –∫–ª–∏–µ–Ω—Ç (—Å–µ—Ä–≤–µ—Ä–∏—Ç–µ –≤–µ—ú–µ —Ä–∞–±–æ—Ç–∞—Ç)")
    print("4. üîê –°—Ç–∞—Ä—Ç–∞—ò —Å–∞–º–æ Auth —Å–µ—Ä–≤–µ—Ä")
    print("5. üì° –°—Ç–∞—Ä—Ç–∞—ò —Å–∞–º–æ Signaling —Å–µ—Ä–≤–µ—Ä")
    print("6. üß™ –ü–æ–∫—Ä–µ–Ω–∏ unit —Ç–µ—Å—Ç–æ–≤–∏")
    print("7. üîç –ü—Ä–æ–≤–µ—Ä–∏ server —Å—Ç–∞—Ç—É—Å")
    print("8. ‚ùå –ò–∑–ª–µ–∑")
    print()

    while True:
        try:
            choice = input("–í–Ω–µ—Å–µ—Ç–µ –∏–∑–±–æ—Ä (1-8): ").strip()

            if choice == "1":
                print("\nüöÄ –°—Ç–∞—Ä—Ç—É–≤–∞–º –∫–æ–º–ø–ª–µ—Ç–Ω–∞ –∏–≥—Ä–∞ (background –ø—Ä–æ—Ü–µ—Å–∏)...")

                # –°—Ç–∞—Ä—Ç–∞—ò Auth —Å–µ—Ä–≤–µ—Ä
                auth_process = start_auth_server()
                if not auth_process:
                    print("‚ùå –ù–µ –º–æ–∂–∞–º –¥–∞ —Å—Ç–∞—Ä—Ç—É–≤–∞–º Auth —Å–µ—Ä–≤–µ—Ä")
                    print("üí° –ü—Ä–æ–±–∞—ò—Ç–µ –æ–ø—Ü–∏—ò–∞ 2 –∏–ª–∏ —Å—Ç–∞—Ä—Ç—É–≤–∞—ò—Ç–µ —Ä–∞—á–Ω–æ")
                    continue

                # –°—Ç–∞—Ä—Ç–∞—ò Signaling —Å–µ—Ä–≤–µ—Ä
                signaling_process = start_signaling_server()
                if not signaling_process:
                    print("‚ùå –ù–µ –º–æ–∂–∞–º –¥–∞ —Å—Ç–∞—Ä—Ç—É–≤–∞–º Signaling —Å–µ—Ä–≤–µ—Ä")
                    if auth_process:
                        auth_process.terminate()
                    print("üí° –ü—Ä–æ–±–∞—ò—Ç–µ –æ–ø—Ü–∏—ò–∞ 2 –∏–ª–∏ —Å—Ç–∞—Ä—Ç—É–≤–∞—ò—Ç–µ —Ä–∞—á–Ω–æ")
                    continue

                try:
                    print("\nüéÆ –ß–µ–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∏—Ç–µ –¥–∞ —Å–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–∞–∞—Ç...")
                    time.sleep(5)
                    start_game_client()
                finally:
                    print("\nüõë –ó–∞—Ç–≤–æ—Ä–∞–º —Å–µ—Ä–≤–µ—Ä–∏...")
                    if auth_process:
                        auth_process.terminate()
                        try:
                            auth_process.wait(timeout=5)
                        except subprocess.TimeoutExpired:
                            auth_process.kill()
                    if signaling_process:
                        signaling_process.terminate()
                        try:
                            signaling_process.wait(timeout=5)
                        except subprocess.TimeoutExpired:
                            signaling_process.kill()
                break

            elif choice == "2":
                if start_servers_in_terminals():
                    print("\n‚è≥ –ß–µ–∫–∞–º —Å–µ—Ä–≤–µ—Ä–∏—Ç–µ –¥–∞ —Å–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–∞—Ç...")
                    time.sleep(8)
                    print("üéÆ –°—Ç–∞—Ä—Ç—É–≤–∞–º –∏–≥—Ä–∞ –∫–ª–∏–µ–Ω—Ç...")
                    start_game_client()
                else:
                    print("‚ùå –ù–µ –º–æ–∂–∞–º –¥–∞ –æ—Ç–≤–æ—Ä–∞–º —Ç–µ—Ä–º–∏–Ω–∞–ª–∏")
                break

            elif choice == "3":
                print("\nüéÆ –°—Ç–∞—Ä—Ç—É–≤–∞–º –∏–≥—Ä–∞ –∫–ª–∏–µ–Ω—Ç...")
                start_game_client()
                break

            elif choice == "4":
                print("\nüîê –°—Ç–∞—Ä—Ç—É–≤–∞–º Auth —Å–µ—Ä–≤–µ—Ä...")
                print("–ü—Ä–∏—Ç–∏—Å–Ω–µ—Ç–µ Ctrl+C –∑–∞ –¥–∞ –∑–∞—Å—Ç–∞–Ω–µ—Ç–µ")
                try:
                    import auth_server
                    import uvicorn
                    uvicorn.run(auth_server.app, host="127.0.0.1", port=8000)
                except KeyboardInterrupt:
                    print("\nüõë Auth —Å–µ—Ä–≤–µ—Ä –∑–∞—Å—Ç–∞–Ω–∞—Ç")
                except ImportError:
                    print("‚ùå auth_server.py –∏–ª–∏ fastapi –Ω–µ —Å–µ –Ω–∞—ò–¥–µ–Ω–∏")
                break

            elif choice == "5":
                print("\nüì° –°—Ç–∞—Ä—Ç—É–≤–∞–º Signaling —Å–µ—Ä–≤–µ—Ä...")
                print("–ü—Ä–∏—Ç–∏—Å–Ω–µ—Ç–µ Ctrl+C –∑–∞ –¥–∞ –∑–∞—Å—Ç–∞–Ω–µ—Ç–µ")
                try:
                    import webrtc_signaling_server
                    import asyncio
                    asyncio.run(webrtc_signaling_server.start_signaling_server())
                except KeyboardInterrupt:
                    print("\nüõë Signaling —Å–µ—Ä–≤–µ—Ä –∑–∞—Å—Ç–∞–Ω–∞—Ç")
                break

            elif choice == "6":
                print("\nüß™ –ü–æ–∫—Ä–µ–Ω—É–≤–∞–º unit —Ç–µ—Å—Ç–æ–≤–∏...")
                try:
                    import test_webrtc_snake_ladder
                    test_webrtc_snake_ladder.run_tests()
                except ImportError:
                    print("‚ùå test_webrtc_snake_ladder.py –Ω–µ –µ –Ω–∞—ò–¥–µ–Ω")
                except Exception as e:
                    print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ç–µ: {e}")
                break

            elif choice == "7":
                print("\nüîç –ü—Ä–æ–≤–µ—Ä—É–≤–∞–º server —Å—Ç–∞—Ç—É—Å...")
                check_server_status()
                input("\n–ü—Ä–∏—Ç–∏—Å–Ω–µ—Ç–µ Enter –∑–∞ –¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ...")

            elif choice == "8":
                print("üëã –î–æ–≤–∏–¥—É–≤–∞—ö–µ!")
                break

            else:
                print("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä. –í–Ω–µ—Å–µ—Ç–µ 1-8.")

        except KeyboardInterrupt:
            print("\n\nüëã –î–æ–≤–∏–¥—É–≤–∞—ö–µ!")
            break
        except Exception as e:
            print(f"‚ùå –ì—Ä–µ—à–∫–∞: {e}")


def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∏ –≥–æ —Å—Ç–∞—Ç—É—Å–æ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∏—Ç–µ"""
    import requests
    from requests.adapters import HTTPAdapter
    from urllib3.util.retry import Retry
    import websockets
    import asyncio

    print("–ü—Ä–æ–≤–µ—Ä—É–≤–∞–º —Å–µ—Ä–≤–µ—Ä—Å–∫–∏ —Å—Ç–∞—Ç—É—Å...")

    # –ü—Ä–æ–≤–µ—Ä–∏ Auth —Å–µ—Ä–≤–µ—Ä
    try:
        session = requests.Session()
        retry = Retry(total=2, backoff_factor=0.3)
        adapter = HTTPAdapter(max_retries=retry)
        session.mount('http://', adapter)

        response = session.get("http://localhost:8000/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Auth —Å–µ—Ä–≤–µ—Ä: –ê–∫—Ç–∏–≤–µ–Ω ({data.get('total_users', 0)} –∫–æ—Ä–∏—Å–Ω–∏—Ü–∏)")
        else:
            print("‚ùå Auth —Å–µ—Ä–≤–µ—Ä: –û–¥–≥–æ–≤–∞—Ä–∞ –Ω–æ –∏–º–∞ –ø—Ä–æ–±–ª–µ–º")
    except Exception as e:
        print(f"‚ùå Auth —Å–µ—Ä–≤–µ—Ä: –ù–µ–¥–æ—Å—Ç–∞–ø–µ–Ω ({e})")

    # –ü—Ä–æ–≤–µ—Ä–∏ Signaling —Å–µ—Ä–≤–µ—Ä
    async def check_signaling():
        try:
            uri = "ws://localhost:8765"
            async with websockets.connect(uri, open_timeout=5) as websocket:
                await websocket.send('{"type": "ping"}')
                return True
        except Exception as e:
            return False

    try:
        signaling_ok = asyncio.run(check_signaling())
        if signaling_ok:
            print("‚úÖ Signaling —Å–µ—Ä–≤–µ—Ä: –ê–∫—Ç–∏–≤–µ–Ω")
        else:
            print("‚ùå Signaling —Å–µ—Ä–≤–µ—Ä: –ü—Ä–æ–±–ª–µ–º —Å–æ –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ")
    except Exception as e:
        print(f"‚ùå Signaling —Å–µ—Ä–≤–µ—Ä: –ù–µ–¥–æ—Å—Ç–∞–ø–µ–Ω ({e})")


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—ò–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—É–≤–∞–º —Å–∏—Å—Ç–µ–º—Å–∫–∏ –±–∞—Ä–∞—ö–∞...")
    print(f"OS: {platform.system()} {platform.release()}")

    # –ü—Ä–æ–≤–µ—Ä–∏ Python –≤–µ—Ä–∑–∏—ò–∞
    if not check_python_version():
        return

    # –ü—Ä–æ–≤–µ—Ä–∏ —Ñ–∞–π–ª–æ–≤–∏
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä—É–≤–∞–º –ø–æ—Ç—Ä–µ–±–Ω–∏ —Ñ–∞–π–ª–æ–≤–∏...")
    if not check_required_files():
        print("\nüí° –ö—Ä–µ–∏—Ä–∞—ò—Ç–µ –≥–∏ –Ω–µ–¥–æ—Å—Ç–∞—Å—É–≤–∞—á–∫–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–∏ –ø—Ä–µ–¥ –¥–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏ –∏ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞—ò –∑–∞–≤–∏—Å–Ω–æ—Å—Ç–∏
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä—É–≤–∞–º Python –±–∏–±–ª–∏–æ—Ç–µ–∫–∏...")
    if not check_and_install_dependencies():
        return

    print("\n‚úÖ –°–∏—Ç–µ –±–∞—Ä–∞—ö–∞ —Å–µ –∏—Å–ø–æ–ª–Ω–µ—Ç–∏!")

    # –ü—Ä–∏–∫–∞–∂–∏ –º–µ–Ω–∏
    show_menu()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–æ—Ç –µ –ø—Ä–µ–∫–∏–Ω–∞—Ç –æ–¥ –∫–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ—á–µ–∫—É–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {e}")
        print("üí° –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ —Å–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–∏ —Å–µ –ø—Ä–∞–≤–∏–ª–Ω–æ –∏–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–∏")