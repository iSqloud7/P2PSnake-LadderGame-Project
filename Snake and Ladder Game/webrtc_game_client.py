#!/usr/bin/env python3
"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞ –≤–µ—Ä–∑–∏—ò–∞ –Ω–∞ GameClient —à—Ç–æ –∫–æ—Ä–∏—Å—Ç–∏ WebRTC –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
–Ω–∞–º–µ—Å—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∏—Ä–∞–Ω WebSocket —Å–µ—Ä–≤–µ—Ä
"""

import tkinter as tk
from tkinter import messagebox, simpledialog
import threading
import json
import time
import os
import requests

# –£–≤–µ–∑–∏ –≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏–æ—Ç –∫–æ–¥
from webrtc_snake_ladder_game import P2PSnakeLadderGame as SnakeLadderGame


SERVER_URL = "http://localhost:8000"

# –£–≤–µ–∑–∏ –≥–æ WebRTC –∫–ª–∏–µ–Ω—Ç–æ—Ç
try:
    from webrtc_client import WebRTCClient, WEBRTC_AVAILABLE
except ImportError:
    WEBRTC_AVAILABLE = False


# –£–≤–µ–∑–∏ –ª–æ–∫–∞–ª–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏–æ—Ç client.py)
def load_local_profile():
    """–í—á–∏—Ç–∞—ò –ª–æ–∫–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª –æ–¥ –¥–∞—Ç–æ—Ç–µ–∫–∞"""
    try:
        if os.path.exists("local_profile.json"):
            with open("local_profile.json", "r") as f:
                return json.load(f)
    except:
        pass
    return {"display_name": "Player", "display_avatar": "üôÇ", "games_played": 0}


def save_local_profile(profile):
    """–ó–∞—á—É–≤–∞—ò –ª–æ–∫–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª"""
    try:
        with open("local_profile.json", "w") as f:
            json.dump(profile, f)
    except:
        pass


class WebRTCGameClient:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üêç Snake & Ladder - P2P Edition")
        self.root.configure(bg="#2a9d8f")

        # –õ–æ–∫–∞–ª–Ω–∏ –ø–æ–¥–∞—Ç–æ—Ü–∏ (–±–µ–∑ server authentication)
        self.local_profile = load_local_profile()
        self.display_name = self.local_profile.get("display_name", "Player")
        self.display_avatar = self.local_profile.get("display_avatar", "üôÇ")

        # WebRTC –∫–ª–∏–µ–Ω—Ç –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
        self.webrtc_client = None
        self.connection_state = "disconnected"
        self.peer_info = None
        self.session_id = None
        self.invite_code = None
        self.is_host = False

        # Game instance
        self.game_instance = None

        if not WEBRTC_AVAILABLE:
            messagebox.showerror(
                "Missing Dependencies",
                "WebRTC functionality requires additional packages:\n\n"
                "pip install aiortc websockets\n\n"
                "Install these packages and restart the application."
            )
            self.root.destroy()
            return

        self.show_login_window()

    def show_login_window(self):
        self.clear_window()
        self.root.geometry("400x300")
        self.root.title("Login / Register")

        tk.Label(self.root, text="üêç Snake & Ladder Login",
                 font=("Arial", 18, "bold"), bg="#2a9d8f", fg="white").pack(pady=20)

        tk.Label(self.root, text="Username:", bg="#2a9d8f", fg="white").pack()
        username_entry = tk.Entry(self.root, font=("Arial", 12))
        username_entry.pack(pady=5)

        tk.Label(self.root, text="Password:", bg="#2a9d8f", fg="white").pack()
        password_entry = tk.Entry(self.root, font=("Arial", 12), show="*")
        password_entry.pack(pady=5)

        def handle_login():
            u, p = username_entry.get(), password_entry.get()
            try:
                r = requests.post(f"{SERVER_URL}/login", json={"username": u, "password": p})
                if r.status_code == 200:
                    messagebox.showinfo("Success", "Login Successful!")
                    self.display_name = u
                    self.show_main_menu()
                else:
                    messagebox.showerror("Error", r.json().get("detail", "Login failed"))
            except Exception as e:
                messagebox.showerror("Error", f"Server not reachable: {e}")

        def handle_register():
            u, p = username_entry.get(), password_entry.get()
            try:
                r = requests.post(f"{SERVER_URL}/register", json={"username": u, "password": p})
                if r.status_code == 200:
                    messagebox.showinfo("Success", "Registered successfully! Now login.")
                else:
                    messagebox.showerror("Error", r.json().get("detail", "Registration failed"))
            except Exception as e:
                messagebox.showerror("Error", f"Server not reachable: {e}")

        tk.Button(self.root, text="Login", command=handle_login,
                  font=("Arial", 14), bg="#27ae60", fg="white").pack(pady=10)

        tk.Button(self.root, text="Register", command=handle_register,
                  font=("Arial", 14), bg="#2980b9", fg="white").pack(pady=5)

    def update_display_profile(self, name=None, avatar=None):
        """–ê–∂—É—Ä–∏—Ä–∞—ò display –ø—Ä–æ—Ñ–∏–ª"""
        if name:
            self.display_name = name
            self.local_profile["display_name"] = name
        if avatar:
            self.display_avatar = avatar
            self.local_profile["display_avatar"] = avatar
        save_local_profile(self.local_profile)

    # ---------- UI Methods ----------
    def clear_window(self):
        """–ò—Å—á–∏—Å—Ç–∏ –≥–∏ —Å–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–¥ –ø—Ä–æ–∑–æ—Ä–µ—Ü–æ—Ç"""
        for widget in self.root.winfo_children():
            widget.destroy()

    def show_main_menu(self):
        """–ü—Ä–∏–∫–∞–∂–∏ –≥–ª–∞–≤–Ω–æ –º–µ–Ω–∏"""
        self.clear_window()
        self.root.geometry("600x700")

        # Header
        header_frame = tk.Frame(self.root, bg="#34495e", height=120)
        header_frame.pack(fill="x")
        header_frame.pack_propagate(False)

        tk.Label(header_frame, text="üêç Snake & Ladder", font=("Arial", 24, "bold"),
                 bg="#34495e", fg="#ecf0f1").pack(pady=10)

        tk.Label(header_frame, text="P2P Edition - Direct Connection", font=("Arial", 12),
                 bg="#34495e", fg="#95a5a6").pack()

        tk.Label(header_frame, text=f"Playing as: {self.display_avatar} {self.display_name}",
                 font=("Arial", 14, "bold"), bg="#34495e", fg="#f1c40f").pack(pady=5)

        # Main content
        content_frame = tk.Frame(self.root, bg="#2c3e50", padx=40, pady=30)
        content_frame.pack(expand=True, fill="both")

        tk.Label(content_frame, text="Choose Game Mode", font=("Arial", 18, "bold"),
                 bg="#2c3e50", fg="#ecf0f1").pack(pady=20)

        # Game mode buttons
        tk.Button(content_frame, text="üéÆ Play Solo (vs Bot)", font=("Arial", 16, "bold"),
                  command=self.play_solo, bg="#e74c3c", fg="white",
                  padx=25, pady=12, width=25, relief=tk.FLAT).pack(pady=10)

        tk.Button(content_frame, text="üåê Host P2P Game", font=("Arial", 16, "bold"),
                  command=self.host_p2p_game, bg="#27ae60", fg="white",
                  padx=25, pady=12, width=25, relief=tk.FLAT).pack(pady=10)

        tk.Button(content_frame, text="üîó Join P2P Game", font=("Arial", 16, "bold"),
                  command=self.join_p2p_game, bg="#3498db", fg="white",
                  padx=25, pady=12, width=25, relief=tk.FLAT).pack(pady=10)

        # Profile button
        tk.Button(content_frame, text="üë§ Change Profile", command=self.show_profile_window,
                  font=("Arial", 14), bg="#9b59b6", fg="white",
                  padx=15, pady=8, width=20, relief=tk.FLAT).pack(pady=20)

        # Connection status
        status_color = {"disconnected": "#e74c3c", "connecting": "#f39c12",
                        "connected": "#27ae60"}.get(self.connection_state, "#95a5a6")

        tk.Label(content_frame, text=f"Status: {self.connection_state.title()}",
                 font=("Arial", 12), bg="#2c3e50", fg=status_color).pack(pady=10)

        # Local stats preview
        self.show_local_stats_preview(content_frame)

    def show_local_stats_preview(self, parent):
        """–ü—Ä–∏–∫–∞–∂–∏ –∫—Ä–∞—Ç–æ–∫ –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ –ª–æ–∫–∞–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if os.path.exists("local_scores.json"):
                with open("local_scores.json", "r") as f:
                    scores = json.load(f)

                stats_frame = tk.Frame(parent, bg="#34495e", relief=tk.FLAT, bd=2)
                stats_frame.pack(pady=15, padx=20, fill="x")

                tk.Label(stats_frame, text="üìä Local Solo Game Stats",
                         font=("Arial", 14, "bold"), bg="#34495e", fg="#ecf0f1").pack(pady=8)

                stats_text = f"Wins: {scores.get('wins', 0)}  ‚Ä¢  Losses: {scores.get('losses', 0)}"
                if scores.get('fastest_win'):
                    stats_text += f"  ‚Ä¢  Best: {scores['fastest_win']}s"

                tk.Label(stats_frame, text=stats_text,
                         font=("Arial", 11), bg="#34495e", fg="#27ae60").pack(pady=5)
        except:
            pass

    def show_profile_window(self):
        """–ü—Ä–∏–∫–∞–∂–∏ –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –ø—Ä–æ—Ñ–∏–ª"""
        profile_window = tk.Toplevel(self.root)
        profile_window.title("Player Profile")
        profile_window.geometry("500x400")
        profile_window.configure(bg="#2c3e50")

        tk.Label(profile_window, text="üéÆ Player Profile", font=("Arial", 18, "bold"),
                 bg="#2c3e50", fg="#ecf0f1").pack(pady=15)

        # Avatar selection
        tk.Label(profile_window, text="Choose Avatar:", font=("Arial", 14, "bold"),
                 bg="#2c3e50", fg="#bdc3c7").pack(pady=(20, 10))

        avatars = ["üôÇ", "üòé", "ü§ñ", "üêç", "üê±", "üêØ", "üê∏", "üêß", "üöÄ", "‚ö°", "üéÆ", "üèÜ"]
        selected_avatar = tk.StringVar(value=self.display_avatar)

        avatar_frame = tk.Frame(profile_window, bg="#2c3e50")
        avatar_frame.pack(pady=10)

        for i, emoji in enumerate(avatars):
            row = i // 4
            col = i % 4
            b = tk.Radiobutton(avatar_frame, text=emoji, variable=selected_avatar, value=emoji,
                               indicatoron=False, font=("Arial", 20), width=2, height=1,
                               relief="raised", selectcolor="#3498db", bg="#ecf0f1",
                               activebackground="#2ecc71")
            b.grid(row=row, column=col, padx=3, pady=3)

        # Name entry
        tk.Label(profile_window, text="Display Name:", font=("Arial", 14, "bold"),
                 bg="#2c3e50", fg="#bdc3c7").pack(pady=(20, 5))

        name_entry = tk.Entry(profile_window, font=("Arial", 12), width=25, relief=tk.FLAT, bd=5)
        name_entry.insert(0, self.display_name)
        name_entry.pack(pady=5, ipady=5)

        def save_profile():
            new_avatar = selected_avatar.get()
            new_name = name_entry.get().strip() or "Player"

            self.update_display_profile(new_name, new_avatar)
            messagebox.showinfo("Profile Updated", f"Profile updated!\nName: {new_name}\nAvatar: {new_avatar}")
            profile_window.destroy()
            self.show_main_menu()

        tk.Button(profile_window, text="üíæ Save Profile", command=save_profile,
                  font=("Arial", 14, "bold"), bg="#27ae60", fg="white",
                  padx=25, pady=10, relief=tk.FLAT).pack(pady=25)

    # ---------- Game Modes ----------
    def play_solo(self):
        """–ó–∞–ø–æ—á–Ω–∏ solo –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç"""
        self.local_profile["games_played"] = self.local_profile.get("games_played", 0) + 1
        save_local_profile(self.local_profile)

        self.start_game(multiplayer=False, player_name=self.display_name, player_avatar=self.display_avatar)

    def host_p2p_game(self):
        """Host P2P –∏–≥—Ä–∞"""
        if self.webrtc_client:
            messagebox.showwarning("Already Connected", "Please disconnect from current session first.")
            return

        self.is_host = True
        self.connection_state = "connecting"

        # –°–æ–∑–¥–∞—ò WebRTC –∫–ª–∏–µ–Ω—Ç
        self.webrtc_client = WebRTCClient()
        self.webrtc_client.on_connection_state_change = self.on_connection_state_change
        self.webrtc_client.on_message_received = self.on_p2p_message_received
        self.webrtc_client.on_peer_info_received = self.on_peer_info_received

        try:
            # –°—Ç–∞—Ä—Ç–∞—ò —Å–µ—Å–∏—ò–∞ –≤–æ background
            future = self.webrtc_client.create_session(self.display_name, self.display_avatar)

            # –ü–æ–∫–∞–∂–∏ waiting –ø—Ä–æ–∑–æ—Ä–µ—Ü
            self.show_waiting_window("Creating session...")

            # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å
            self.root.after(1000, self.check_session_status)

        except Exception as e:
            messagebox.showerror("Error", f"Failed to create session: {e}")
            self.cleanup_webrtc()

    def join_p2p_game(self):
        """–ü—Ä–∏–∫–ª—É—á–∏ —Å–µ –Ω–∞ P2P –∏–≥—Ä–∞"""
        if self.webrtc_client:
            messagebox.showwarning("Already Connected", "Please disconnect from current session first.")
            return

        # –ü—Ä–∞—à–∞—ò –∑–∞ invite –∫–æ–¥
        invite_code = simpledialog.askstring("Join Game", "Enter invite code (8 characters):")
        if not invite_code or len(invite_code.strip()) != 8:
            messagebox.showerror("Invalid Code", "Please enter a valid 8-character invite code.")
            return

        self.is_host = False
        self.connection_state = "connecting"

        # –°–æ–∑–¥–∞—ò WebRTC –∫–ª–∏–µ–Ω—Ç
        self.webrtc_client = WebRTCClient()
        self.webrtc_client.on_connection_state_change = self.on_connection_state_change
        self.webrtc_client.on_message_received = self.on_p2p_message_received
        self.webrtc_client.on_peer_info_received = self.on_peer_info_received

        try:
            # –ü—Ä–∏–∫–ª—É—á–∏ —Å–µ –Ω–∞ —Å–µ—Å–∏—ò–∞
            future = self.webrtc_client.join_session(invite_code.strip(), self.display_name, self.display_avatar)

            # –ü–æ–∫–∞–∂–∏ waiting –ø—Ä–æ–∑–æ—Ä–µ—Ü
            self.show_waiting_window(f"Joining session {invite_code.upper()}...")

            # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å
            self.root.after(1000, self.check_session_status)

        except Exception as e:
            messagebox.showerror("Error", f"Failed to join session: {e}")
            self.cleanup_webrtc()

    def show_waiting_window(self, message):
        """–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ —á–µ–∫–∞—ö–µ"""
        self.waiting_window = tk.Toplevel(self.root)
        self.waiting_window.title("Connecting...")
        self.waiting_window.geometry("400x200")
        self.waiting_window.configure(bg="#2c3e50")
        self.waiting_window.transient(self.root)
        self.waiting_window.grab_set()

        tk.Label(self.waiting_window, text="üåê Connecting to Peer", font=("Arial", 16, "bold"),
                 bg="#2c3e50", fg="#ecf0f1").pack(pady=20)

        self.waiting_label = tk.Label(self.waiting_window, text=message, font=("Arial", 12),
                                      bg="#2c3e50", fg="#bdc3c7", wraplength=350)
        self.waiting_label.pack(pady=10)

        tk.Button(self.waiting_window, text="Cancel", command=self.cancel_connection,
                  font=("Arial", 12), bg="#e74c3c", fg="white", padx=15, pady=5, relief=tk.FLAT).pack(pady=20)

    def cancel_connection(self):
        """–û—Ç–∫–∞–∂–∏ –≥–æ –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ—Ç–æ"""
        self.cleanup_webrtc()
        if hasattr(self, 'waiting_window'):
            self.waiting_window.destroy()
        self.show_main_menu()

    def check_session_status(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏ –≥–æ —Å—Ç–∞—Ç—É—Å–æ—Ç –Ω–∞ —Å–µ—Å–∏—ò–∞—Ç–∞"""
        if not self.webrtc_client:
            return

        # –ê–∫–æ —Å–º–µ host –∏ —á–µ–∫–∞–º–µ guest
        if self.is_host and self.connection_state == "waiting_for_guest":
            if hasattr(self, 'waiting_window'):
                self.waiting_label.config(
                    text=f"Session created! Share invite code: {self.invite_code}\nWaiting for player to join...")

        # –ê–∫–æ —Å–º–µ connected, –∑–∞–ø–æ—á–Ω–∏ –∏–≥—Ä–∞
        elif self.connection_state == "connected":
            if hasattr(self, 'waiting_window'):
                self.waiting_window.destroy()
            self.start_p2p_game()
            return

        # –ê–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞
        elif self.connection_state == "error":
            if hasattr(self, 'waiting_window'):
                self.waiting_window.destroy()
            messagebox.showerror("Connection Failed", "Failed to establish P2P connection.")
            self.cleanup_webrtc()
            self.show_main_menu()
            return

        # –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∞ –ø—Ä–æ–≤–µ—Ä—É–≤–∞—à
        self.root.after(1000, self.check_session_status)

    # ---------- WebRTC Event Handlers ----------
    def on_connection_state_change(self, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∞ –Ω–∞ connection —Å—Ç–∞—Ç—É—Å"""
        self.connection_state = state

        if state == "waiting_for_guest" and self.is_host:
            # –ó–∞—á—É–≤–∞—ò –≥–æ invite code –æ–¥ WebRTC –∫–ª–∏–µ–Ω—Ç–æ—Ç
            self.invite_code = getattr(self.webrtc_client, 'invite_code', 'Unknown')

        elif state == "peer_disconnected":
            messagebox.showinfo("Peer Disconnected", "The other player has disconnected.")
            self.cleanup_webrtc()
            self.show_main_menu()

    def on_p2p_message_received(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ P2P –ø–æ—Ä–∞–∫–∏"""
        # –ü—Ä–æ—Å–ª–µ–¥–∏ –≥–∏ –ø–æ—Ä–∞–∫–∏—Ç–µ –≤–æ –∏–≥—Ä–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∞—Ç–∞
        if self.game_instance and hasattr(self.game_instance, 'on_ws_message'):
            self.game_instance.on_ws_message(json.dumps(message))

    def on_peer_info_received(self, peer_info):
        """–ö–æ–≥–∞ –ø—Ä–∏–º–∏–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –¥—Ä—É–≥–∏–æ—Ç –∏–≥—Ä–∞—á"""
        self.peer_info = peer_info
        print(f"Peer info received: {peer_info}")

    # ---------- Game Management ----------
    def start_p2p_game(self):
        """–ó–∞–ø–æ—á–Ω–∏ P2P –∏–≥—Ä–∞"""
        if not self.peer_info:
            messagebox.showerror("Error", "Peer information not available")
            return

        # –ü–æ–¥–≥–æ—Ç–≤–∏ –∏–º–∏—ö–∞ –∏ –∞–≤–∞—Ç–∞—Ä–∏
        if self.is_host:
            player_names = [self.display_name, self.peer_info.get('name', 'Guest')]
            player_avatars = [self.display_avatar, self.peer_info.get('avatar', 'üòé')]
        else:
            player_names = [self.peer_info.get('name', 'Host'), self.display_name]
            player_avatars = [self.peer_info.get('avatar', 'üôÇ'), self.display_avatar]

        # –°—Ç–∞—Ä—Ç–∞—ò –∏–≥—Ä–∞ —Å–æ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
        self.start_game(multiplayer=True, player_names=player_names, player_avatars=player_avatars)

    def start_game(self, multiplayer=False, player_names=None, player_avatars=None, player_name=None,
                   player_avatar=None):
        """–ó–∞–ø–æ—á–Ω–∏ –∏–≥—Ä–∞"""
        # –ù–ï —ò–∞ —Å–∫—Ä–∏—ò –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∞ —Å–µ—É—à—Ç–µ - —Å–∞–º–æ –ø—Ä–æ–º–µ–Ω–∏ –≥–æ–ª–µ–º–∏–Ω–∞
        self.root.iconify()  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä–∞—ò –Ω–∞–º–µ—Å—Ç–æ withdraw

        game_window = tk.Toplevel(self.root)
        game_window.title("Snake & Ladder Game")

        # –û–±–µ–∑–±–µ–¥–∏ —Å–µ –¥–µ–∫–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–æ—Ç –µ visible
        game_window.lift()
        game_window.focus_force()

        # –ü–æ–¥–≥–æ—Ç–≤–∏ –∏–º–∏—ö–∞ –∏ –∞–≤–∞—Ç–∞—Ä–∏
        if not multiplayer:
            # Singleplayer vs bot
            names = [player_name or self.display_name, "Bot"]
            avatars = [player_avatar or self.display_avatar, "ü§ñ"]
        else:
            # P2P multiplayer
            names = player_names or [self.display_name, "Peer"]
            avatars = player_avatars or [self.display_avatar, "üòé"]

        # –°–æ–∑–¥–∞—ò –∏–≥—Ä–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∞ —Å–æ P2P WebSocket –∑–∞–º–µ–Ω–∞
        try:
            self.game_instance = SnakeLadderGame(
                game_window,
                player_names=names,
                player_avatars=avatars,
                p2p_connection=P2PWebSocketAdapter(self.webrtc_client) if multiplayer else None,
                singleplayer=not multiplayer,
                is_host=self.is_host if multiplayer else True,
                on_game_end=self.on_game_end
            )
        except Exception as e:
            print(f"Error creating game instance: {e}")
            messagebox.showerror("Game Error", f"Failed to create game: {e}")
            self.root.deiconify()

    def on_game_end(self, winner_idx):
        """–ö–æ–≥–∞ –∏–≥—Ä–∞—Ç–∞ –∑–∞–≤—Ä—à—É–≤–∞"""
        self.root.deiconify()  # –ü–æ–∫–∞–∂–∏ –≥–ª–∞–≤–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü
        self.show_main_menu()

    def cleanup_webrtc(self):
        """–ò—Å—á–∏—Å—Ç–∏ WebRTC —Ä–µ—Å—É—Ä—Å–∏"""
        if self.webrtc_client:
            self.webrtc_client.close()
            self.webrtc_client = None
        self.connection_state = "disconnected"
        self.peer_info = None
        self.session_id = None
        self.invite_code = None

    def run(self):
        """–°—Ç–∞—Ä—Ç–∞—ò –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∞"""
        try:
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        finally:
            self.cleanup_webrtc()

    def on_closing(self):
        """–ü—Ä–∏ –∑–∞—Ç–≤–∞—Ä–∞—ö–µ –Ω–∞ –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∞—Ç–∞"""
        self.cleanup_webrtc()
        self.root.destroy()


# ---------- P2P WebSocket –∞–¥–∞–ø—Ç–µ—Ä ----------
class P2PWebSocketAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä —à—Ç–æ —ò–∞ –∑–∞–º–µ–Ω–∞ WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∞ —Å–æ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞"""

    def __init__(self, webrtc_client):
        self.webrtc_client = webrtc_client

    def send_message(self, message_dict):
        """–ò—Å–ø—Ä–∞—Ç–∏ –ø–æ—Ä–∞–∫–∞ (API –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞)"""
        if self.webrtc_client:
            try:
                return self.webrtc_client.send_message(message_dict)
            except:
                return False
        return False

    def get_pending_messages(self):
        """–ó–µ–º–∏ pending –ø–æ—Ä–∞–∫–∏"""
        if self.webrtc_client and hasattr(self.webrtc_client, 'get_pending_messages'):
            return self.webrtc_client.get_pending_messages()
        return []

    def send(self, message):
        """–ò—Å–ø—Ä–∞—Ç–∏ –ø–æ—Ä–∞–∫–∞ (—Å–∏–º—É–ª–∏—Ä–∞ WebSocket.send)"""
        if self.webrtc_client:
            try:
                data = json.loads(message)
                return self.webrtc_client.send_message(data)
            except:
                return False
        return False

    def close(self):
        """–ó–∞—Ç–≤–æ—Ä–∏ –≤—Ä—Å–∫–∞ (—Å–∏–º—É–ª–∏—Ä–∞ WebSocket.close)"""
        if self.webrtc_client:
            self.webrtc_client.close()


if __name__ == "__main__":
    if not WEBRTC_AVAILABLE:
        print("Error: Missing dependencies. Install with:")
        print("pip install aiortc websockets")
        exit(1)

    client = WebRTCGameClient()
    client.run()
