#!/usr/bin/env python3
"""
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–∞–Ω–∞ –≤–µ—Ä–∑–∏—ò–∞ –Ω–∞ GameClient —à—Ç–æ –∫–æ—Ä–∏—Å—Ç–∏ WebRTC –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
–°–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ï–ù LOGIN –°–ò–°–¢–ï–ú
"""

import tkinter as tk
from tkinter import messagebox, simpledialog
import threading
import json
import time
import os
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# –£–≤–µ–∑–∏ –≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏–æ—Ç –∫–æ–¥
from webrtc_snake_ladder_game import P2PSnakeLadderGame as SnakeLadderGame

SERVER_URL = "http://localhost:8000"

# –£–≤–µ–∑–∏ –≥–æ WebRTC –∫–ª–∏–µ–Ω—Ç–æ—Ç
try:
    from webrtc_client import WebRTCClient, WEBRTC_AVAILABLE
except ImportError:
    WEBRTC_AVAILABLE = False


# –õ–æ–∫–∞–ª–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
def load_local_profile():
    """–í—á–∏—Ç–∞—ò –ª–æ–∫–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª –æ–¥ –¥–∞—Ç–æ—Ç–µ–∫–∞"""
    try:
        if os.path.exists("local_profile.json"):
            with open("local_profile.json", "r") as f:
                return json.load(f)
    except:
        pass
    return {"display_name": "Player", "display_avatar": "üôÇ", "games_played": 0}


def save_local_profile(profile):
    """–ó–∞—á—É–≤–∞—ò –ª–æ–∫–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª"""
    try:
        with open("local_profile.json", "w") as f:
            json.dump(profile, f)
    except:
        pass


def create_session():
    """–°–æ–∑–¥–∞—ò HTTP —Å–µ—Å–∏—ò–∞ —Å–æ retry –ª–æ–≥–∏–∫–∞"""
    session = requests.Session()

    # –ü–æ–¥–¥—Ä—à–∫–∞ –∑–∞ —Å—Ç–∞—Ä–∏ –∏ –Ω–æ–≤–∏ –≤–µ—Ä–∑–∏–∏ –Ω–∞ urllib3
    try:
        # –ù–æ–≤–∞ –≤–µ—Ä–∑–∏—ò–∞
        retry_strategy = Retry(
            total=3,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["HEAD", "GET", "OPTIONS", "POST"]
        )
    except TypeError:
        # –°—Ç–∞—Ä–∞ –≤–µ—Ä–∑–∏—ò–∞
        retry_strategy = Retry(
            total=3,
            status_forcelist=[429, 500, 502, 503, 504],
            method_whitelist=["HEAD", "GET", "OPTIONS", "POST"]
        )

    adapter = HTTPAdapter(max_retries=retry_strategy)
    session.mount("http://", adapter)
    session.mount("https://", adapter)
    return session


class WebRTCGameClient:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üêç Snake & Ladder - P2P Edition")
        self.root.configure(bg="#2a9d8f")

        # –ö–æ—Ä–∏—Å–Ω–∏–∫ –∏ –ø—Ä–æ—Ñ–∏–ª
        self.current_user = None
        self.user_data = {}
        self.local_profile = load_local_profile()
        self.display_name = self.local_profile.get("display_name", "Player")
        self.display_avatar = self.local_profile.get("display_avatar", "üôÇ")

        # WebRTC –∫–ª–∏–µ–Ω—Ç –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
        self.webrtc_client = None
        self.connection_state = "disconnected"
        self.peer_info = None
        self.session_id = None
        self.invite_code = None
        self.is_host = False

        # Game instance
        self.game_instance = None

        # HTTP session
        self.http_session = create_session()

        if not WEBRTC_AVAILABLE:
            messagebox.showerror(
                "Missing Dependencies",
                "WebRTC functionality requires additional packages:\n\n"
                "pip install aiortc websockets\n\n"
                "Install these packages and restart the application."
            )
            self.root.destroy()
            return

        # –ü—Ä–æ–≤–µ—Ä–∏ server connection –ø—Ä–≤–æ
        self.check_server_connection()

    def check_server_connection(self):
        """–ü—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ—Ç —Ä–∞–±–æ—Ç–∏"""
        try:
            response = self.http_session.get(f"{SERVER_URL}/status", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Auth server –µ –¥–æ—Å—Ç–∞–ø–µ–Ω")
                self.show_login_window()
            else:
                self.show_server_error()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Auth server –Ω–µ –µ –¥–æ—Å—Ç–∞–ø–µ–Ω: {e}")
            self.show_server_error()

    def show_server_error(self):
        """–ü—Ä–∏–∫–∞–∂–∏ –≥—Ä–µ—à–∫–∞ –∑–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–Ω—É–¥–∏ –æ—Ñ–ª–∞—ò–Ω –º–æ–¥"""
        self.clear_window()
        self.root.geometry("500x400")
        self.root.title("Server Connection Error")

        tk.Label(self.root, text="‚ö†Ô∏è Server Connection Error",
                 font=("Arial", 18, "bold"), bg="#2a9d8f", fg="#e74c3c").pack(pady=20)

        tk.Label(self.root, text="–ù–µ –º–æ–∂–µ–º–µ –¥–∞ —Å–µ –ø–æ–≤—Ä–∑–µ–º–µ —Å–æ auth —Å–µ—Ä–≤–µ—Ä–æ—Ç.",
                 font=("Arial", 12), bg="#2a9d8f", fg="white", wraplength=450).pack(pady=10)

        tk.Label(self.root, text="–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ auth_server.py —Ä–∞–±–æ—Ç–∏ –Ω–∞ –ø–æ—Ä—Ç 8000.",
                 font=("Arial", 10), bg="#2a9d8f", fg="#bdc3c7", wraplength=450).pack(pady=5)

        tk.Button(self.root, text="üîÑ Retry Connection", command=self.check_server_connection,
                  font=("Arial", 14), bg="#3498db", fg="white", padx=20, pady=10).pack(pady=20)

        tk.Button(self.root, text="üéÆ Continue Offline", command=self.show_offline_mode,
                  font=("Arial", 14), bg="#f39c12", fg="white", padx=20, pady=10).pack(pady=10)

        tk.Label(self.root, text="Offline mode: Solo –∏–≥—Ä–∏ —Å–∞–º–æ, –±–µ–∑ P2P –º—É–ª—Ç–∏–ø–ª–µ—ò–µ—Ä",
                 font=("Arial", 10), bg="#2a9d8f", fg="#95a5a6").pack(pady=10)

    def show_offline_mode(self):
        """–û—Ñ–ª–∞—ò–Ω –º–æ–¥ –±–µ–∑ server"""
        self.current_user = "offline_user"
        self.display_name = self.local_profile.get("display_name", "Player")
        messagebox.showinfo("Offline Mode", "–†–∞–±–æ—Ç–∏–º–µ –≤–æ –æ—Ñ–ª–∞—ò–Ω –º–æ–¥. –î–æ—Å—Ç–∞–ø–Ω–∏ —Å–µ —Å–∞–º–æ Solo –∏–≥—Ä–∏.")
        self.show_main_menu(offline_mode=True)

    def show_login_window(self):
        """–ü—Ä–∏–∫–∞–∂–∏ login –ø—Ä–æ–∑–æ—Ä–µ—Ü"""
        self.clear_window()
        self.root.geometry("450x500")
        self.root.title("Login / Register")

        # Header
        header_frame = tk.Frame(self.root, bg="#34495e", height=100)
        header_frame.pack(fill="x")
        header_frame.pack_propagate(False)

        tk.Label(header_frame, text="üêç Snake & Ladder",
                 font=("Arial", 20, "bold"), bg="#34495e", fg="#ecf0f1").pack(pady=15)
        tk.Label(header_frame, text="P2P Multiplayer Edition",
                 font=("Arial", 12), bg="#34495e", fg="#95a5a6").pack()

        # Main form
        form_frame = tk.Frame(self.root, bg="#2a9d8f", padx=40, pady=30)
        form_frame.pack(expand=True, fill="both")

        tk.Label(form_frame, text="–ù–∞—ò–∞–≤–∞ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—ò–∞", font=("Arial", 16, "bold"),
                 bg="#2a9d8f", fg="white").pack(pady=20)

        # Username
        tk.Label(form_frame, text="–ö–æ—Ä–∏—Å–Ω–∏—á–∫–æ –∏–º–µ:", font=("Arial", 12, "bold"),
                 bg="#2a9d8f", fg="white").pack(anchor="w", pady=(10, 5))

        self.username_entry = tk.Entry(form_frame, font=("Arial", 12), width=25,
                                       relief=tk.FLAT, bd=5)
        self.username_entry.pack(pady=5, ipady=8)

        # Password
        tk.Label(form_frame, text="–õ–æ–∑–∏–Ω–∫–∞:", font=("Arial", 12, "bold"),
                 bg="#2a9d8f", fg="white").pack(anchor="w", pady=(15, 5))

        self.password_entry = tk.Entry(form_frame, font=("Arial", 12), width=25,
                                       show="*", relief=tk.FLAT, bd=5)
        self.password_entry.pack(pady=5, ipady=8)

        # Buttons
        button_frame = tk.Frame(form_frame, bg="#2a9d8f")
        button_frame.pack(pady=30)

        tk.Button(button_frame, text="üîë –ù–∞—ò–∞–≤–∏ —Å–µ", command=self.handle_login,
                  font=("Arial", 14, "bold"), bg="#27ae60", fg="white",
                  padx=20, pady=10, relief=tk.FLAT, width=12).pack(pady=5)

        tk.Button(button_frame, text="üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞—ò —Å–µ", command=self.handle_register,
                  font=("Arial", 14, "bold"), bg="#2980b9", fg="white",
                  padx=20, pady=10, relief=tk.FLAT, width=12).pack(pady=5)

        tk.Button(button_frame, text="üéÆ –û—Ñ–ª–∞—ò–Ω –º–æ–¥", command=self.show_offline_mode,
                  font=("Arial", 12), bg="#95a5a6", fg="white",
                  padx=15, pady=8, relief=tk.FLAT, width=12).pack(pady=10)

        # Status
        self.login_status = tk.Label(form_frame, text="", font=("Arial", 10),
                                     bg="#2a9d8f", fg="#ecf0f1", wraplength=350)
        self.login_status.pack(pady=10)

        # Bind Enter –∫–ª—É—á
        self.username_entry.bind("<Return>", lambda e: self.password_entry.focus())
        self.password_entry.bind("<Return>", lambda e: self.handle_login())

        # –§–æ–∫—É—Å –Ω–∞ username
        self.username_entry.focus()

    def handle_login(self):
        """–û–±—Ä–∞–±–æ—Ç–∏ login"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()

        if not username or not password:
            self.login_status.config(text="–í–Ω–µ—Å–µ—Ç–µ –∫–æ—Ä–∏—Å–Ω–∏—á–∫–æ –∏–º–µ –∏ –ª–æ–∑–∏–Ω–∫–∞", fg="#e74c3c")
            return

        self.login_status.config(text="–°–µ –Ω–∞—ò–∞–≤—É–≤–∞–º...", fg="#f1c40f")
        self.root.update()

        try:
            response = self.http_session.post(
                f"{SERVER_URL}/login",
                json={"username": username, "password": password},
                timeout=10
            )

            if response.status_code == 200:
                result = response.json()
                self.current_user = result.get("username", username)
                self.user_data = result.get("user_data", {})
                self.display_name = self.current_user

                # –ó–∞—á—É–≤–∞—ò –ª–æ–∫–∞–ª–Ω–æ
                self.update_display_profile(name=self.current_user)

                self.login_status.config(text="–£—Å–ø–µ—à–Ω–∞ –Ω–∞—ò–∞–≤–∞! üéâ", fg="#27ae60")
                self.root.after(1500, self.show_main_menu)

            else:
                error_data = response.json()
                error_msg = error_data.get("detail", "–ù–µ—É—Å–ø–µ—à–Ω–∞ –Ω–∞—ò–∞–≤–∞")
                self.login_status.config(text=f"‚ùå {error_msg}", fg="#e74c3c")

        except requests.exceptions.Timeout:
            self.login_status.config(text="‚ùå Timeout - —Å–µ—Ä–≤–µ—Ä–æ—Ç –Ω–µ –æ–¥–≥–æ–≤–∞—Ä–∞", fg="#e74c3c")
        except requests.exceptions.RequestException as e:
            self.login_status.config(text=f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ", fg="#e74c3c")
        except Exception as e:
            self.login_status.config(text=f"‚ùå –ù–µ–æ—á–µ–∫—É–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞", fg="#e74c3c")

    def handle_register(self):
        """–û–±—Ä–∞–±–æ—Ç–∏ register"""
        username = self.username_entry.get().strip()
        password = self.password_entry.get().strip()

        if not username or not password:
            self.login_status.config(text="–í–Ω–µ—Å–µ—Ç–µ –∫–æ—Ä–∏—Å–Ω–∏—á–∫–æ –∏–º–µ –∏ –ª–æ–∑–∏–Ω–∫–∞", fg="#e74c3c")
            return

        if len(username) < 3:
            self.login_status.config(text="–ö–æ—Ä–∏—Å–Ω–∏—á–∫–æ—Ç–æ –∏–º–µ –º–æ—Ä–∞ –¥–∞ –∏–º–∞ –Ω–∞—ò–º–∞–ª–∫—É 3 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏", fg="#e74c3c")
            return

        if len(password) < 4:
            self.login_status.config(text="–õ–æ–∑–∏–Ω–∫–∞—Ç–∞ –º–æ—Ä–∞ –¥–∞ –∏–º–∞ –Ω–∞—ò–º–∞–ª–∫—É 4 –∫–∞—Ä–∞–∫—Ç–µ—Ä–∏", fg="#e74c3c")
            return

        self.login_status.config(text="–°–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–º...", fg="#f1c40f")
        self.root.update()

        try:
            response = self.http_session.post(
                f"{SERVER_URL}/register",
                json={"username": username, "password": password},
                timeout=10
            )

            if response.status_code == 200:
                result = response.json()
                self.login_status.config(text="‚úÖ –£—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—ò–∞! –°–µ–≥–∞ —Å–µ –Ω–∞—ò–∞–≤–µ—Ç–µ.", fg="#27ae60")
                # –ò—Å—á–∏—Å—Ç–∏ –≥–∏ –ø–æ–ª–∏—ö–∞—Ç–∞
                self.password_entry.delete(0, tk.END)
                self.username_entry.focus()

            else:
                error_data = response.json()
                error_msg = error_data.get("detail", "–ù–µ—É—Å–ø–µ—à–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—ò–∞")
                self.login_status.config(text=f"‚ùå {error_msg}", fg="#e74c3c")

        except requests.exceptions.Timeout:
            self.login_status.config(text="‚ùå Timeout - —Å–µ—Ä–≤–µ—Ä–æ—Ç –Ω–µ –æ–¥–≥–æ–≤–∞—Ä–∞", fg="#e74c3c")
        except requests.exceptions.RequestException as e:
            self.login_status.config(text=f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ", fg="#e74c3c")
        except Exception as e:
            self.login_status.config(text=f"‚ùå –ù–µ–æ—á–µ–∫—É–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞", fg="#e74c3c")

    def update_display_profile(self, name=None, avatar=None):
        """–ê–∂—É—Ä–∏—Ä–∞—ò display –ø—Ä–æ—Ñ–∏–ª"""
        if name:
            self.display_name = name
            self.local_profile["display_name"] = name
        if avatar:
            self.display_avatar = avatar
            self.local_profile["display_avatar"] = avatar
        save_local_profile(self.local_profile)

    # ---------- UI Methods ----------
    def clear_window(self):
        """–ò—Å—á–∏—Å—Ç–∏ –≥–∏ —Å–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏ –æ–¥ –ø—Ä–æ–∑–æ—Ä–µ—Ü–æ—Ç"""
        for widget in self.root.winfo_children():
            widget.destroy()

    def show_main_menu(self, offline_mode=False):
        """–ü—Ä–∏–∫–∞–∂–∏ –≥–ª–∞–≤–Ω–æ –º–µ–Ω–∏"""
        self.clear_window()
        self.root.geometry("600x700")
        self.root.title(f"Snake & Ladder - {self.display_name}")

        # Header
        header_frame = tk.Frame(self.root, bg="#34495e", height=120)
        header_frame.pack(fill="x")
        header_frame.pack_propagate(False)

        tk.Label(header_frame, text="üêç Snake & Ladder", font=("Arial", 24, "bold"),
                 bg="#34495e", fg="#ecf0f1").pack(pady=10)

        mode_text = "Offline Mode" if offline_mode else "P2P Edition - Direct Connection"
        tk.Label(header_frame, text=mode_text, font=("Arial", 12),
                 bg="#34495e", fg="#95a5a6").pack()

        tk.Label(header_frame, text=f"Playing as: {self.display_avatar} {self.display_name}",
                 font=("Arial", 14, "bold"), bg="#34495e", fg="#f1c40f").pack(pady=5)

        # Main content
        content_frame = tk.Frame(self.root, bg="#2c3e50", padx=40, pady=30)
        content_frame.pack(expand=True, fill="both")

        tk.Label(content_frame, text="Choose Game Mode", font=("Arial", 18, "bold"),
                 bg="#2c3e50", fg="#ecf0f1").pack(pady=20)

        # Game mode buttons
        tk.Button(content_frame, text="üéÆ Play Solo (vs Bot)", font=("Arial", 16, "bold"),
                  command=self.play_solo, bg="#e74c3c", fg="white",
                  padx=25, pady=12, width=25, relief=tk.FLAT).pack(pady=10)

        if not offline_mode:
            tk.Button(content_frame, text="üåê Host P2P Game", font=("Arial", 16, "bold"),
                      command=self.host_p2p_game, bg="#27ae60", fg="white",
                      padx=25, pady=12, width=25, relief=tk.FLAT).pack(pady=10)

            tk.Button(content_frame, text="üîó Join P2P Game", font=("Arial", 16, "bold"),
                      command=self.join_p2p_game, bg="#3498db", fg="white",
                      padx=25, pady=12, width=25, relief=tk.FLAT).pack(pady=10)
        else:
            tk.Label(content_frame, text="P2P –º—É–ª—Ç–∏–ø–ª–µ—ò–µ—Ä –Ω–µ–¥–æ—Å—Ç–∞–ø–µ–Ω –≤–æ –æ—Ñ–ª–∞—ò–Ω –º–æ–¥",
                     font=("Arial", 12), bg="#2c3e50", fg="#e74c3c").pack(pady=10)

        # Profile and logout buttons
        button_frame = tk.Frame(content_frame, bg="#2c3e50")
        button_frame.pack(pady=20)

        tk.Button(button_frame, text="üë§ Change Profile", command=self.show_profile_window,
                  font=("Arial", 14), bg="#9b59b6", fg="white",
                  padx=15, pady=8, width=15, relief=tk.FLAT).pack(side=tk.LEFT, padx=5)

        if not offline_mode:
            tk.Button(button_frame, text="üö™ Logout", command=self.logout,
                      font=("Arial", 14), bg="#e67e22", fg="white",
                      padx=15, pady=8, width=10, relief=tk.FLAT).pack(side=tk.RIGHT, padx=5)

        # Connection status
        if not offline_mode:
            status_color = {"disconnected": "#e74c3c", "connecting": "#f39c12",
                            "connected": "#27ae60"}.get(self.connection_state, "#95a5a6")
            tk.Label(content_frame, text=f"Status: {self.connection_state.title()}",
                     font=("Arial", 12), bg="#2c3e50", fg=status_color).pack(pady=10)

        # User stats –∞–∫–æ –∏–º–∞–º–µ server –ø–æ–¥–∞—Ç–æ—Ü–∏
        if self.user_data and not offline_mode:
            self.show_user_stats(content_frame)
        else:
            # Local stats preview
            self.show_local_stats_preview(content_frame)

    def show_user_stats(self, parent):
        """–ü—Ä–∏–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–¥ —Å–µ—Ä–≤–µ—Ä–æ—Ç"""
        stats_frame = tk.Frame(parent, bg="#34495e", relief=tk.FLAT, bd=2)
        stats_frame.pack(pady=15, padx=20, fill="x")

        tk.Label(stats_frame, text="üìä Your Game Statistics",
                 font=("Arial", 14, "bold"), bg="#34495e", fg="#ecf0f1").pack(pady=8)

        stats_text = (f"Games: {self.user_data.get('games_played', 0)}  ‚Ä¢  "
                      f"Wins: {self.user_data.get('wins', 0)}  ‚Ä¢  "
                      f"Losses: {self.user_data.get('losses', 0)}")

        tk.Label(stats_frame, text=stats_text,
                 font=("Arial", 11), bg="#34495e", fg="#27ae60").pack(pady=5)

    def logout(self):
        """–û–¥—ò–∞–≤–∏ —Å–µ"""
        self.current_user = None
        self.user_data = {}
        self.cleanup_webrtc()
        self.show_login_window()

    # [–û—Å—Ç–∞–Ω–∞—Ç–∏–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–≤–∞ –∏—Å—Ç - —Å–∏—Ç–µ P2P –º–µ—Ç–æ–¥–∏, –∏–≥—Ä–∞ –º–µ—Ç–æ–¥–∏, –∏—Ç–Ω.]
    # –ö–æ–ø–∏—Ä–∞—ò—Ç–µ –≥–∏ –æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏–æ—Ç webrtc_game_client.py:

    def show_local_stats_preview(self, parent):
        """–ü—Ä–∏–∫–∞–∂–∏ –∫—Ä–∞—Ç–æ–∫ –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ –ª–æ–∫–∞–ª–Ω–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if os.path.exists("local_scores.json"):
                with open("local_scores.json", "r") as f:
                    scores = json.load(f)

                stats_frame = tk.Frame(parent, bg="#34495e", relief=tk.FLAT, bd=2)
                stats_frame.pack(pady=15, padx=20, fill="x")

                tk.Label(stats_frame, text="üìä Local Solo Game Stats",
                         font=("Arial", 14, "bold"), bg="#34495e", fg="#ecf0f1").pack(pady=8)

                stats_text = f"Wins: {scores.get('wins', 0)}  ‚Ä¢  Losses: {scores.get('losses', 0)}"
                if scores.get('fastest_win'):
                    stats_text += f"  ‚Ä¢  Best: {scores['fastest_win']}s"

                tk.Label(stats_frame, text=stats_text,
                         font=("Arial", 11), bg="#34495e", fg="#27ae60").pack(pady=5)
        except:
            pass

    def show_profile_window(self):
        """–ü—Ä–∏–∫–∞–∂–∏ –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ –ø—Ä–æ—Ñ–∏–ª"""
        profile_window = tk.Toplevel(self.root)
        profile_window.title("Player Profile")
        profile_window.geometry("500x400")
        profile_window.configure(bg="#2c3e50")

        tk.Label(profile_window, text="üéÆ Player Profile", font=("Arial", 18, "bold"),
                 bg="#2c3e50", fg="#ecf0f1").pack(pady=15)

        # Avatar selection
        tk.Label(profile_window, text="Choose Avatar:", font=("Arial", 14, "bold"),
                 bg="#2c3e50", fg="#bdc3c7").pack(pady=(20, 10))

        avatars = ["üôÇ", "üòé", "ü§ñ", "üêç", "üê±", "üêØ", "üê∏", "üêß", "üöÄ", "‚ö°", "üéÆ", "üèÜ"]
        selected_avatar = tk.StringVar(value=self.display_avatar)

        avatar_frame = tk.Frame(profile_window, bg="#2c3e50")
        avatar_frame.pack(pady=10)

        for i, emoji in enumerate(avatars):
            row = i // 4
            col = i % 4
            b = tk.Radiobutton(avatar_frame, text=emoji, variable=selected_avatar, value=emoji,
                               indicatoron=False, font=("Arial", 20), width=2, height=1,
                               relief="raised", selectcolor="#3498db", bg="#ecf0f1",
                               activebackground="#2ecc71")
            b.grid(row=row, column=col, padx=3, pady=3)

        # Name entry
        tk.Label(profile_window, text="Display Name:", font=("Arial", 14, "bold"),
                 bg="#2c3e50", fg="#bdc3c7").pack(pady=(20, 5))

        name_entry = tk.Entry(profile_window, font=("Arial", 12), width=25, relief=tk.FLAT, bd=5)
        name_entry.insert(0, self.display_name)
        name_entry.pack(pady=5, ipady=5)

        def save_profile():
            new_avatar = selected_avatar.get()
            new_name = name_entry.get().strip() or "Player"

            self.update_display_profile(new_name, new_avatar)
            messagebox.showinfo("Profile Updated", f"Profile updated!\nName: {new_name}\nAvatar: {new_avatar}")
            profile_window.destroy()
            self.show_main_menu()

        tk.Button(profile_window, text="üíæ Save Profile", command=save_profile,
                  font=("Arial", 14, "bold"), bg="#27ae60", fg="white",
                  padx=25, pady=10, relief=tk.FLAT).pack(pady=25)

    # ---------- Game Modes ----------
    def play_solo(self):
        """–ó–∞–ø–æ—á–Ω–∏ solo –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç"""
        self.local_profile["games_played"] = self.local_profile.get("games_played", 0) + 1
        save_local_profile(self.local_profile)

        self.start_game(multiplayer=False, player_name=self.display_name, player_avatar=self.display_avatar)

    def host_p2p_game(self):
        """Host P2P –∏–≥—Ä–∞"""
        if self.webrtc_client:
            messagebox.showwarning("Already Connected", "Please disconnect from current session first.")
            return

        self.is_host = True
        self.connection_state = "connecting"

        # –°–æ–∑–¥–∞—ò WebRTC –∫–ª–∏–µ–Ω—Ç
        self.webrtc_client = WebRTCClient()
        self.webrtc_client.on_connection_state_change = self.on_connection_state_change
        self.webrtc_client.on_message_received = self.on_p2p_message_received
        self.webrtc_client.on_peer_info_received = self.on_peer_info_received

        try:
            # –°—Ç–∞—Ä—Ç–∞—ò —Å–µ—Å–∏—ò–∞ –≤–æ background
            future = self.webrtc_client.create_session(self.display_name, self.display_avatar)

            # –ü–æ–∫–∞–∂–∏ waiting –ø—Ä–æ–∑–æ—Ä–µ—Ü
            self.show_waiting_window("Creating session...")

            # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å
            self.root.after(1000, self.check_session_status)

        except Exception as e:
            messagebox.showerror("Error", f"Failed to create session: {e}")
            self.cleanup_webrtc()

    def join_p2p_game(self):
        """–ü—Ä–∏–∫–ª—É—á–∏ —Å–µ –Ω–∞ P2P –∏–≥—Ä–∞"""
        if self.webrtc_client:
            messagebox.showwarning("Already Connected", "Please disconnect from current session first.")
            return

        # –ü—Ä–∞—à–∞—ò –∑–∞ invite –∫–æ–¥
        invite_code = simpledialog.askstring("Join Game", "Enter invite code (8 characters):")
        if not invite_code or len(invite_code.strip()) != 8:
            messagebox.showerror("Invalid Code", "Please enter a valid 8-character invite code.")
            return

        self.is_host = False
        self.connection_state = "connecting"

        # –°–æ–∑–¥–∞—ò WebRTC –∫–ª–∏–µ–Ω—Ç
        self.webrtc_client = WebRTCClient()
        self.webrtc_client.on_connection_state_change = self.on_connection_state_change
        self.webrtc_client.on_message_received = self.on_p2p_message_received
        self.webrtc_client.on_peer_info_received = self.on_peer_info_received

        try:
            # –ü—Ä–∏–∫–ª—É—á–∏ —Å–µ –Ω–∞ —Å–µ—Å–∏—ò–∞
            future = self.webrtc_client.join_session(invite_code.strip(), self.display_name, self.display_avatar)

            # –ü–æ–∫–∞–∂–∏ waiting –ø—Ä–æ–∑–æ—Ä–µ—Ü
            self.show_waiting_window(f"Joining session {invite_code.upper()}...")

            # –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å
            self.root.after(1000, self.check_session_status)

        except Exception as e:
            messagebox.showerror("Error", f"Failed to join session: {e}")
            self.cleanup_webrtc()

    def show_waiting_window(self, message):
        """–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–∑–æ—Ä–µ—Ü –∑–∞ —á–µ–∫–∞—ö–µ"""
        self.waiting_window = tk.Toplevel(self.root)
        self.waiting_window.title("Connecting...")
        self.waiting_window.geometry("400x200")
        self.waiting_window.configure(bg="#2c3e50")
        self.waiting_window.transient(self.root)
        self.waiting_window.grab_set()

        tk.Label(self.waiting_window, text="üåê Connecting to Peer", font=("Arial", 16, "bold"),
                 bg="#2c3e50", fg="#ecf0f1").pack(pady=20)

        self.waiting_label = tk.Label(self.waiting_window, text=message, font=("Arial", 12),
                                      bg="#2c3e50", fg="#bdc3c7", wraplength=350)
        self.waiting_label.pack(pady=10)

        tk.Button(self.waiting_window, text="Cancel", command=self.cancel_connection,
                  font=("Arial", 12), bg="#e74c3c", fg="white", padx=15, pady=5, relief=tk.FLAT).pack(pady=20)

    def cancel_connection(self):
        """–û—Ç–∫–∞–∂–∏ –≥–æ –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ—Ç–æ"""
        self.cleanup_webrtc()
        if hasattr(self, 'waiting_window'):
            self.waiting_window.destroy()
        self.show_main_menu()

    def check_session_status(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏ –≥–æ —Å—Ç–∞—Ç—É—Å–æ—Ç –Ω–∞ —Å–µ—Å–∏—ò–∞—Ç–∞"""
        if not self.webrtc_client:
            return

        # –ê–∫–æ —Å–º–µ host –∏ —á–µ–∫–∞–º–µ guest
        if self.is_host and self.connection_state == "waiting_for_guest":
            if hasattr(self, 'waiting_window'):
                self.waiting_label.config(
                    text=f"Session created! Share invite code: {self.invite_code}\nWaiting for player to join...")

        # –ê–∫–æ —Å–º–µ connected, –∑–∞–ø–æ—á–Ω–∏ –∏–≥—Ä–∞
        elif self.connection_state == "connected":
            if hasattr(self, 'waiting_window'):
                self.waiting_window.destroy()
            self.start_p2p_game()
            return

        # –ê–∫–æ –∏–º–∞ –≥—Ä–µ—à–∫–∞
        elif self.connection_state == "error":
            if hasattr(self, 'waiting_window'):
                self.waiting_window.destroy()
            messagebox.showerror("Connection Failed", "Failed to establish P2P connection.")
            self.cleanup_webrtc()
            self.show_main_menu()
            return

        # –ü—Ä–æ–¥–æ–ª–∂–∏ –¥–∞ –ø—Ä–æ–≤–µ—Ä—É–≤–∞—à
        self.root.after(1000, self.check_session_status)

    # ---------- WebRTC Event Handlers ----------
    def on_connection_state_change(self, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –ø—Ä–æ–º–µ–Ω–∞ –Ω–∞ connection —Å—Ç–∞—Ç—É—Å"""
        self.connection_state = state

        if state == "waiting_for_guest" and self.is_host:
            # –ó–∞—á—É–≤–∞—ò –≥–æ invite code –æ–¥ WebRTC –∫–ª–∏–µ–Ω—Ç–æ—Ç
            self.invite_code = getattr(self.webrtc_client, 'invite_code', 'Unknown')

        elif state == "peer_disconnected":
            messagebox.showinfo("Peer Disconnected", "The other player has disconnected.")
            self.cleanup_webrtc()
            self.show_main_menu()

    def on_p2p_message_received(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ P2P –ø–æ—Ä–∞–∫–∏"""
        # –ü—Ä–æ—Å–ª–µ–¥–∏ –≥–∏ –ø–æ—Ä–∞–∫–∏—Ç–µ –≤–æ –∏–≥—Ä–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∞—Ç–∞
        if self.game_instance and hasattr(self.game_instance, 'on_ws_message'):
            self.game_instance.on_ws_message(json.dumps(message))

    def on_peer_info_received(self, peer_info):
        """–ö–æ–≥–∞ –ø—Ä–∏–º–∏–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞ –¥—Ä—É–≥–∏–æ—Ç –∏–≥—Ä–∞—á"""
        self.peer_info = peer_info
        print(f"Peer info received: {peer_info}")

    # ---------- Game Management ----------
    def start_p2p_game(self):
        """–ó–∞–ø–æ—á–Ω–∏ P2P –∏–≥—Ä–∞"""
        if not self.peer_info:
            messagebox.showerror("Error", "Peer information not available")
            return

        # –ü–æ–¥–≥–æ—Ç–≤–∏ –∏–º–∏—ö–∞ –∏ –∞–≤–∞—Ç–∞—Ä–∏
        if self.is_host:
            player_names = [self.display_name, self.peer_info.get('name', 'Guest')]
            player_avatars = [self.display_avatar, self.peer_info.get('avatar', 'üòé')]
        else:
            player_names = [self.peer_info.get('name', 'Host'), self.display_name]
            player_avatars = [self.peer_info.get('avatar', 'üôÇ'), self.display_avatar]

        # –°—Ç–∞—Ä—Ç–∞—ò –∏–≥—Ä–∞ —Å–æ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞
        self.start_game(multiplayer=True, player_names=player_names, player_avatars=player_avatars)

    def start_game(self, multiplayer=False, player_names=None, player_avatars=None, player_name=None,
                   player_avatar=None):
        """–ó–∞–ø–æ—á–Ω–∏ –∏–≥—Ä–∞"""
        # –ù–ï —ò–∞ —Å–∫—Ä–∏—ò –≥–ª–∞–≤–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∞ —Å–µ—É—à—Ç–µ - —Å–∞–º–æ –ø—Ä–æ–º–µ–Ω–∏ –≥–æ–ª–µ–º–∏–Ω–∞
        self.root.iconify()  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä–∞—ò –Ω–∞–º–µ—Å—Ç–æ withdraw

        game_window = tk.Toplevel(self.root)
        game_window.title("Snake & Ladder Game")

        # –û–±–µ–∑–±–µ–¥–∏ —Å–µ –¥–µ–∫–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–æ—Ç –µ visible
        game_window.lift()
        game_window.focus_force()

        # –ü–æ–¥–≥–æ—Ç–≤–∏ –∏–º–∏—ö–∞ –∏ –∞–≤–∞—Ç–∞—Ä–∏
        if not multiplayer:
            # Singleplayer vs bot
            names = [player_name or self.display_name, "Bot"]
            avatars = [player_avatar or self.display_avatar, "ü§ñ"]
        else:
            # P2P multiplayer
            names = player_names or [self.display_name, "Peer"]
            avatars = player_avatars or [self.display_avatar, "üòé"]

        # –°–æ–∑–¥–∞—ò –∏–≥—Ä–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∞ —Å–æ P2P WebSocket –∑–∞–º–µ–Ω–∞
        try:
            self.game_instance = SnakeLadderGame(
                game_window,
                player_names=names,
                player_avatars=avatars,
                p2p_connection=P2PWebSocketAdapter(self.webrtc_client) if multiplayer else None,
                singleplayer=not multiplayer,
                is_host=self.is_host if multiplayer else True,
                on_game_end=self.on_game_end
            )
        except Exception as e:
            print(f"Error creating game instance: {e}")
            messagebox.showerror("Game Error", f"Failed to create game: {e}")
            self.root.deiconify()

    def on_game_end(self, winner_idx):
        """–ö–æ–≥–∞ –∏–≥—Ä–∞—Ç–∞ –∑–∞–≤—Ä—à—É–≤–∞"""
        self.root.deiconify()  # –ü–æ–∫–∞–∂–∏ –≥–ª–∞–≤–µ–Ω –ø—Ä–æ–∑–æ—Ä–µ—Ü
        self.show_main_menu()

    def cleanup_webrtc(self):
        """–ò—Å—á–∏—Å—Ç–∏ WebRTC —Ä–µ—Å—É—Ä—Å–∏"""
        if self.webrtc_client:
            self.webrtc_client.close()
            self.webrtc_client = None
        self.connection_state = "disconnected"
        self.peer_info = None
        self.session_id = None
        self.invite_code = None

    def run(self):
        """–°—Ç–∞—Ä—Ç–∞—ò –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∞"""
        try:
            self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
            self.root.mainloop()
        finally:
            self.cleanup_webrtc()

    def on_closing(self):
        """–ü—Ä–∏ –∑–∞—Ç–≤–∞—Ä–∞—ö–µ –Ω–∞ –∞–ø–ª–∏–∫–∞—Ü–∏—ò–∞—Ç–∞"""
        self.cleanup_webrtc()
        self.root.destroy()


# ---------- P2P WebSocket –∞–¥–∞–ø—Ç–µ—Ä ----------
class P2PWebSocketAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä —à—Ç–æ —ò–∞ –∑–∞–º–µ–Ω–∞ WebSocket —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∞ —Å–æ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞"""

    def __init__(self, webrtc_client):
        self.webrtc_client = webrtc_client

    def send_message(self, message_dict):
        """–ò—Å–ø—Ä–∞—Ç–∏ –ø–æ—Ä–∞–∫–∞ (API –∑–∞ P2P –∫–æ–º—É–Ω–∏–∫–∞—Ü–∏—ò–∞)"""
        if self.webrtc_client:
            try:
                return self.webrtc_client.send_message(message_dict)
            except:
                return False
        return False

    def get_pending_messages(self):
        """–ó–µ–º–∏ pending –ø–æ—Ä–∞–∫–∏"""
        if self.webrtc_client and hasattr(self.webrtc_client, 'get_pending_messages'):
            return self.webrtc_client.get_pending_messages()
        return []

    def send(self, message):
        """–ò—Å–ø—Ä–∞—Ç–∏ –ø–æ—Ä–∞–∫–∞ (—Å–∏–º—É–ª–∏—Ä–∞ WebSocket.send)"""
        if self.webrtc_client:
            try:
                data = json.loads(message)
                return self.webrtc_client.send_message(data)
            except:
                return False
        return False

    def close(self):
        """–ó–∞—Ç–≤–æ—Ä–∏ –≤—Ä—Å–∫–∞ (—Å–∏–º—É–ª–∏—Ä–∞ WebSocket.close)"""
        if self.webrtc_client:
            self.webrtc_client.close()


if __name__ == "__main__":
    if not WEBRTC_AVAILABLE:
        print("Error: Missing dependencies. Install with:")
        print("pip install aiortc websockets")
        exit(1)

    client = WebRTCGameClient()
    client.run()